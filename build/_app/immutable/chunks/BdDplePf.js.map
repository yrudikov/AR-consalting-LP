{"version":3,"file":"BdDplePf.js","sources":["../../../../../../node_modules/@sveltejs/kit/src/utils/url.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/fetcher.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/utils.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/hash.js","../../../../../../node_modules/@sveltejs/kit/src/utils/routing.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/parse.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/session-storage.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/constants.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/utils.js","../../../../../../node_modules/devalue/src/base64.js","../../../../../../node_modules/@sveltejs/kit/src/utils/exports.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/control.js","../../../../../../node_modules/@sveltejs/kit/src/utils/error.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/state.svelte.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/client.js","../../../../../../node_modules/@sveltejs/kit/src/utils/array.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/pathname.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/shared.js","../../../../../../node_modules/devalue/src/parse.js","../../../../../../node_modules/devalue/src/constants.js"],"sourcesContent":["import { BROWSER, DEV } from 'esm-env';\n\n/**\n * Matches a URI scheme. See https://www.rfc-editor.org/rfc/rfc3986#section-3.1\n * @type {RegExp}\n */\nexport const SCHEME = /^[a-z][a-z\\d+\\-.]+:/i;\n\nconst internal = new URL('sveltekit-internal://');\n\n/**\n * @param {string} base\n * @param {string} path\n */\nexport function resolve(base, path) {\n\t// special case\n\tif (path[0] === '/' && path[1] === '/') return path;\n\n\tlet url = new URL(base, internal);\n\turl = new URL(path, url);\n\n\treturn url.protocol === internal.protocol ? url.pathname + url.search + url.hash : url.href;\n}\n\n/** @param {string} path */\nexport function is_root_relative(path) {\n\treturn path[0] === '/' && path[1] !== '/';\n}\n\n/**\n * @param {string} path\n * @param {import('types').TrailingSlash} trailing_slash\n */\nexport function normalize_path(path, trailing_slash) {\n\tif (path === '/' || trailing_slash === 'ignore') return path;\n\n\tif (trailing_slash === 'never') {\n\t\treturn path.endsWith('/') ? path.slice(0, -1) : path;\n\t} else if (trailing_slash === 'always' && !path.endsWith('/')) {\n\t\treturn path + '/';\n\t}\n\n\treturn path;\n}\n\n/**\n * Decode pathname excluding %25 to prevent further double decoding of params\n * @param {string} pathname\n */\nexport function decode_pathname(pathname) {\n\treturn pathname.split('%25').map(decodeURI).join('%25');\n}\n\n/** @param {Record<string, string>} params */\nexport function decode_params(params) {\n\tfor (const key in params) {\n\t\t// input has already been decoded by decodeURI\n\t\t// now handle the rest\n\t\tparams[key] = decodeURIComponent(params[key]);\n\t}\n\n\treturn params;\n}\n\n/**\n * The error when a URL is malformed is not very helpful, so we augment it with the URI\n * @param {string} uri\n */\nexport function decode_uri(uri) {\n\ttry {\n\t\treturn decodeURI(uri);\n\t} catch (e) {\n\t\tif (e instanceof Error) {\n\t\t\te.message = `Failed to decode URI: ${uri}\\n` + e.message;\n\t\t}\n\t\tthrow e;\n\t}\n}\n\n/**\n * Returns everything up to the first `#` in a URL\n * @param {{href: string}} url_like\n */\nexport function strip_hash({ href }) {\n\treturn href.split('#')[0];\n}\n\n/**\n * @param {URL} url\n * @param {() => void} callback\n * @param {(search_param: string) => void} search_params_callback\n * @param {boolean} [allow_hash]\n */\nexport function make_trackable(url, callback, search_params_callback, allow_hash = false) {\n\tconst tracked = new URL(url);\n\n\tObject.defineProperty(tracked, 'searchParams', {\n\t\tvalue: new Proxy(tracked.searchParams, {\n\t\t\tget(obj, key) {\n\t\t\t\tif (key === 'get' || key === 'getAll' || key === 'has') {\n\t\t\t\t\treturn (/**@type {string}*/ param) => {\n\t\t\t\t\t\tsearch_params_callback(param);\n\t\t\t\t\t\treturn obj[key](param);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// if they try to access something different from what is in `tracked_search_params_properties`\n\t\t\t\t// we track the whole url (entries, values, keys etc)\n\t\t\t\tcallback();\n\n\t\t\t\tconst value = Reflect.get(obj, key);\n\t\t\t\treturn typeof value === 'function' ? value.bind(obj) : value;\n\t\t\t}\n\t\t}),\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n\n\t/**\n\t * URL properties that could change during the lifetime of the page,\n\t * which excludes things like `origin`\n\t */\n\tconst tracked_url_properties = ['href', 'pathname', 'search', 'toString', 'toJSON'];\n\tif (allow_hash) tracked_url_properties.push('hash');\n\n\tfor (const property of tracked_url_properties) {\n\t\tObject.defineProperty(tracked, property, {\n\t\t\tget() {\n\t\t\t\tcallback();\n\t\t\t\t// @ts-expect-error\n\t\t\t\treturn url[property];\n\t\t\t},\n\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true\n\t\t});\n\t}\n\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\ttracked[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url, opts);\n\t\t};\n\n\t\t// @ts-ignore\n\t\ttracked.searchParams[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url.searchParams, opts);\n\t\t};\n\t}\n\n\tif ((DEV || !BROWSER) && !allow_hash) {\n\t\tdisable_hash(tracked);\n\t}\n\n\treturn tracked;\n}\n\n/**\n * Disallow access to `url.hash` on the server and in `load`\n * @param {URL} url\n */\nfunction disable_hash(url) {\n\tallow_nodejs_console_log(url);\n\n\tObject.defineProperty(url, 'hash', {\n\t\tget() {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot access event.url.hash. Consider using `page.url.hash` inside a component instead'\n\t\t\t);\n\t\t}\n\t});\n}\n\n/**\n * Disallow access to `url.search` and `url.searchParams` during prerendering\n * @param {URL} url\n */\nexport function disable_search(url) {\n\tallow_nodejs_console_log(url);\n\n\tfor (const property of ['search', 'searchParams']) {\n\t\tObject.defineProperty(url, property, {\n\t\t\tget() {\n\t\t\t\tthrow new Error(`Cannot access url.${property} on a page with prerendering enabled`);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Allow URL to be console logged, bypassing disabled properties.\n * @param {URL} url\n */\nfunction allow_nodejs_console_log(url) {\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\turl[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(new URL(url), opts);\n\t\t};\n\t}\n}\n","import { BROWSER, DEV } from 'esm-env';\nimport { hash } from '../hash.js';\nimport { b64_decode } from '../utils.js';\n\nlet loading = 0;\n\n/** @type {typeof fetch} */\nconst native_fetch = BROWSER ? window.fetch : /** @type {any} */ (() => {});\n\nexport function lock_fetch() {\n\tloading += 1;\n}\n\nexport function unlock_fetch() {\n\tloading -= 1;\n}\n\nif (DEV && BROWSER) {\n\tlet can_inspect_stack_trace = false;\n\n\t// detect whether async stack traces work\n\t// eslint-disable-next-line @typescript-eslint/require-await\n\tconst check_stack_trace = async () => {\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\t\tcan_inspect_stack_trace = stack.includes('check_stack_trace');\n\t};\n\n\tvoid check_stack_trace();\n\n\t/**\n\t * @param {RequestInfo | URL} input\n\t * @param {RequestInit & Record<string, any> | undefined} init\n\t */\n\twindow.fetch = (input, init) => {\n\t\t// Check if fetch was called via load_node. the lock method only checks if it was called at the\n\t\t// same time, but not necessarily if it was called from `load`.\n\t\t// We use just the filename as the method name sometimes does not appear on the CI.\n\t\tconst url = input instanceof Request ? input.url : input.toString();\n\t\tconst stack_array = /** @type {string} */ (new Error().stack).split('\\n');\n\t\t// We need to do a cutoff because Safari and Firefox maintain the stack\n\t\t// across events and for example traces a `fetch` call triggered from a button\n\t\t// back to the creation of the event listener and the element creation itself,\n\t\t// where at some point client.js will show up, leading to false positives.\n\t\tconst cutoff = stack_array.findIndex((a) => a.includes('load@') || a.includes('at load'));\n\t\tconst stack = stack_array.slice(0, cutoff + 2).join('\\n');\n\n\t\tconst in_load_heuristic = can_inspect_stack_trace\n\t\t\t? stack.includes('src/runtime/client/client.js')\n\t\t\t: loading;\n\n\t\t// This flag is set in initial_fetch and subsequent_fetch\n\t\tconst used_kit_fetch = init?.__sveltekit_fetch__;\n\n\t\tif (in_load_heuristic && !used_kit_fetch) {\n\t\t\tconsole.warn(\n\t\t\t\t`Loading ${url} using \\`window.fetch\\`. For best results, use the \\`fetch\\` that is passed to your \\`load\\` function: https://svelte.dev/docs/kit/load#making-fetch-requests`\n\t\t\t);\n\t\t}\n\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n} else if (BROWSER) {\n\twindow.fetch = (input, init) => {\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n}\n\nconst cache = new Map();\n\n/**\n * Should be called on the initial run of load functions that hydrate the page.\n * Saves any requests with cache-control max-age to the cache.\n * @param {URL | string} resource\n * @param {RequestInit} [opts]\n */\nexport function initial_fetch(resource, opts) {\n\tconst selector = build_selector(resource, opts);\n\n\tconst script = document.querySelector(selector);\n\tif (script?.textContent) {\n\t\tlet { body, ...init } = JSON.parse(script.textContent);\n\n\t\tconst ttl = script.getAttribute('data-ttl');\n\t\tif (ttl) cache.set(selector, { body, init, ttl: 1000 * Number(ttl) });\n\t\tconst b64 = script.getAttribute('data-b64');\n\t\tif (b64 !== null) {\n\t\t\t// Can't use native_fetch('data:...;base64,${body}')\n\t\t\t// csp can block the request\n\t\t\tbody = b64_decode(body);\n\t\t}\n\n\t\treturn Promise.resolve(new Response(body, init));\n\t}\n\n\treturn DEV ? dev_fetch(resource, opts) : window.fetch(resource, opts);\n}\n\n/**\n * Tries to get the response from the cache, if max-age allows it, else does a fetch.\n * @param {URL | string} resource\n * @param {string} resolved\n * @param {RequestInit} [opts]\n */\nexport function subsequent_fetch(resource, resolved, opts) {\n\tif (cache.size > 0) {\n\t\tconst selector = build_selector(resource, opts);\n\t\tconst cached = cache.get(selector);\n\t\tif (cached) {\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Request/cache#value\n\t\t\tif (\n\t\t\t\tperformance.now() < cached.ttl &&\n\t\t\t\t['default', 'force-cache', 'only-if-cached', undefined].includes(opts?.cache)\n\t\t\t) {\n\t\t\t\treturn new Response(cached.body, cached.init);\n\t\t\t}\n\n\t\t\tcache.delete(selector);\n\t\t}\n\t}\n\n\treturn DEV ? dev_fetch(resolved, opts) : window.fetch(resolved, opts);\n}\n\n/**\n * @param {RequestInfo | URL} resource\n * @param {RequestInit & Record<string, any> | undefined} opts\n */\nexport function dev_fetch(resource, opts) {\n\tconst patched_opts = { ...opts };\n\t// This assigns the __sveltekit_fetch__ flag and makes it non-enumerable\n\tObject.defineProperty(patched_opts, '__sveltekit_fetch__', {\n\t\tvalue: true,\n\t\twritable: true,\n\t\tconfigurable: true\n\t});\n\treturn window.fetch(resource, patched_opts);\n}\n\n/**\n * Build the cache key for a given request\n * @param {URL | RequestInfo} resource\n * @param {RequestInit} [opts]\n */\nfunction build_selector(resource, opts) {\n\tconst url = JSON.stringify(resource instanceof Request ? resource.url : resource);\n\n\tlet selector = `script[data-sveltekit-fetched][data-url=${url}]`;\n\n\tif (opts?.headers || opts?.body) {\n\t\t/** @type {import('types').StrictBody[]} */\n\t\tconst values = [];\n\n\t\tif (opts.headers) {\n\t\t\tvalues.push([...new Headers(opts.headers)].join(','));\n\t\t}\n\n\t\tif (opts.body && (typeof opts.body === 'string' || ArrayBuffer.isView(opts.body))) {\n\t\t\tvalues.push(opts.body);\n\t\t}\n\n\t\tselector += `[data-hash=\"${hash(...values)}\"]`;\n\t}\n\n\treturn selector;\n}\n","/**\n * @param {string} text\n * @returns {ArrayBufferLike}\n */\nexport function b64_decode(text) {\n\tconst d = atob(text);\n\n\tconst u8 = new Uint8Array(d.length);\n\n\tfor (let i = 0; i < d.length; i++) {\n\t\tu8[i] = d.charCodeAt(i);\n\t}\n\n\treturn u8.buffer;\n}\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {string}\n */\nexport function b64_encode(buffer) {\n\tif (globalThis.Buffer) {\n\t\treturn Buffer.from(buffer).toString('base64');\n\t}\n\n\tconst little_endian = new Uint8Array(new Uint16Array([1]).buffer)[0] > 0;\n\n\t// The Uint16Array(Uint8Array(...)) ensures the code points are padded with 0's\n\treturn btoa(\n\t\tnew TextDecoder(little_endian ? 'utf-16le' : 'utf-16be').decode(\n\t\t\tnew Uint16Array(new Uint8Array(buffer))\n\t\t)\n\t);\n}\n\n/**\n * Like node's path.relative, but without using node\n * @param {string} from\n * @param {string} to\n */\nexport function get_relative_path(from, to) {\n\tconst from_parts = from.split(/[/\\\\]/);\n\tconst to_parts = to.split(/[/\\\\]/);\n\tfrom_parts.pop(); // get dirname\n\n\twhile (from_parts[0] === to_parts[0]) {\n\t\tfrom_parts.shift();\n\t\tto_parts.shift();\n\t}\n\n\tlet i = from_parts.length;\n\twhile (i--) from_parts[i] = '..';\n\n\treturn from_parts.concat(to_parts).join('/');\n}\n","/**\n * Hash using djb2\n * @param {import('types').StrictBody[]} values\n */\nexport function hash(...values) {\n\tlet hash = 5381;\n\n\tfor (const value of values) {\n\t\tif (typeof value === 'string') {\n\t\t\tlet i = value.length;\n\t\t\twhile (i) hash = (hash * 33) ^ value.charCodeAt(--i);\n\t\t} else if (ArrayBuffer.isView(value)) {\n\t\t\tconst buffer = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);\n\t\t\tlet i = buffer.length;\n\t\t\twhile (i) hash = (hash * 33) ^ buffer[--i];\n\t\t} else {\n\t\t\tthrow new TypeError('value must be a string or TypedArray');\n\t\t}\n\t}\n\n\treturn (hash >>> 0).toString(36);\n}\n","import { BROWSER } from 'esm-env';\n\nconst param_pattern = /^(\\[)?(\\.\\.\\.)?(\\w+)(?:=(\\w+))?(\\])?$/;\n\n/**\n * Creates the regex pattern, extracts parameter names, and generates types for a route\n * @param {string} id\n */\nexport function parse_route_id(id) {\n\t/** @type {import('types').RouteParam[]} */\n\tconst params = [];\n\n\tconst pattern =\n\t\tid === '/'\n\t\t\t? /^\\/$/\n\t\t\t: new RegExp(\n\t\t\t\t\t`^${get_route_segments(id)\n\t\t\t\t\t\t.map((segment) => {\n\t\t\t\t\t\t\t// special case — /[...rest]/ could contain zero segments\n\t\t\t\t\t\t\tconst rest_match = /^\\[\\.\\.\\.(\\w+)(?:=(\\w+))?\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (rest_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: rest_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: rest_match[2],\n\t\t\t\t\t\t\t\t\toptional: false,\n\t\t\t\t\t\t\t\t\trest: true,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/(.*))?';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// special case — /[[optional]]/ could contain zero segments\n\t\t\t\t\t\t\tconst optional_match = /^\\[\\[(\\w+)(?:=(\\w+))?\\]\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (optional_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: optional_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: optional_match[2],\n\t\t\t\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\t\t\t\trest: false,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/([^/]+))?';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst parts = segment.split(/\\[(.+?)\\](?!\\])/);\n\t\t\t\t\t\t\tconst result = parts\n\t\t\t\t\t\t\t\t.map((content, i) => {\n\t\t\t\t\t\t\t\t\tif (i % 2) {\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('x+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(String.fromCharCode(parseInt(content.slice(2), 16)));\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('u+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(\n\t\t\t\t\t\t\t\t\t\t\t\tString.fromCharCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\t...content\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.slice(2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map((code) => parseInt(code, 16))\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// We know the match cannot be null in the browser because manifest generation\n\t\t\t\t\t\t\t\t\t\t// would have invoked this during build and failed if we hit an invalid\n\t\t\t\t\t\t\t\t\t\t// param/matcher name with non-alphanumeric character.\n\t\t\t\t\t\t\t\t\t\tconst match = /** @type {RegExpExecArray} */ (param_pattern.exec(content));\n\t\t\t\t\t\t\t\t\t\tif (!BROWSER && !match) {\n\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Invalid param: ${content}. Params and matcher names can only have underscores and alphanumeric characters.`\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst [, is_optional, is_rest, name, matcher] = match;\n\t\t\t\t\t\t\t\t\t\t// It's assumed that the following invalid route id cases are already checked\n\t\t\t\t\t\t\t\t\t\t// - unbalanced brackets\n\t\t\t\t\t\t\t\t\t\t// - optional param following rest param\n\n\t\t\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t\tmatcher,\n\t\t\t\t\t\t\t\t\t\t\toptional: !!is_optional,\n\t\t\t\t\t\t\t\t\t\t\trest: !!is_rest,\n\t\t\t\t\t\t\t\t\t\t\tchained: is_rest ? i === 1 && parts[0] === '' : false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\treturn is_rest ? '(.*?)' : is_optional ? '([^/]*)?' : '([^/]+?)';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn escape(content);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('');\n\n\t\t\t\t\t\t\treturn '/' + result;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('')}/?$`\n\t\t\t\t);\n\n\treturn { pattern, params };\n}\n\nconst optional_param_regex = /\\/\\[\\[\\w+?(?:=\\w+)?\\]\\]/;\n\n/**\n * Removes optional params from a route ID.\n * @param {string} id\n * @returns The route id with optional params removed\n */\nexport function remove_optional_params(id) {\n\treturn id.replace(optional_param_regex, '');\n}\n\n/**\n * Returns `false` for `(group)` segments\n * @param {string} segment\n */\nfunction affects_path(segment) {\n\treturn !/^\\([^)]+\\)$/.test(segment);\n}\n\n/**\n * Splits a route id into its segments, removing segments that\n * don't affect the path (i.e. groups). The root route is represented by `/`\n * and will be returned as `['']`.\n * @param {string} route\n * @returns string[]\n */\nexport function get_route_segments(route) {\n\treturn route.slice(1).split('/').filter(affects_path);\n}\n\n/**\n * @param {RegExpMatchArray} match\n * @param {import('types').RouteParam[]} params\n * @param {Record<string, import('@sveltejs/kit').ParamMatcher>} matchers\n */\nexport function exec(match, params, matchers) {\n\t/** @type {Record<string, string>} */\n\tconst result = {};\n\n\tconst values = match.slice(1);\n\tconst values_needing_match = values.filter((value) => value !== undefined);\n\n\tlet buffered = 0;\n\n\tfor (let i = 0; i < params.length; i += 1) {\n\t\tconst param = params[i];\n\t\tlet value = values[i - buffered];\n\n\t\t// in the `[[a=b]]/.../[...rest]` case, if one or more optional parameters\n\t\t// weren't matched, roll the skipped values into the rest\n\t\tif (param.chained && param.rest && buffered) {\n\t\t\tvalue = values\n\t\t\t\t.slice(i - buffered, i + 1)\n\t\t\t\t.filter((s) => s)\n\t\t\t\t.join('/');\n\n\t\t\tbuffered = 0;\n\t\t}\n\n\t\t// if `value` is undefined, it means this is an optional or rest parameter\n\t\tif (value === undefined) {\n\t\t\tif (param.rest) result[param.name] = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!param.matcher || matchers[param.matcher](value)) {\n\t\t\tresult[param.name] = value;\n\n\t\t\t// Now that the params match, reset the buffer if the next param isn't the [...rest]\n\t\t\t// and the next value is defined, otherwise the buffer will cause us to skip values\n\t\t\tconst next_param = params[i + 1];\n\t\t\tconst next_value = values[i + 1];\n\t\t\tif (next_param && !next_param.rest && next_param.optional && next_value && param.chained) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\n\t\t\t// There are no more params and no more values, but all non-empty values have been matched\n\t\t\tif (\n\t\t\t\t!next_param &&\n\t\t\t\t!next_value &&\n\t\t\t\tObject.keys(result).length === values_needing_match.length\n\t\t\t) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// in the `/[[a=b]]/...` case, if the value didn't satisfy the matcher,\n\t\t// keep track of the number of skipped optional parameters and continue\n\t\tif (param.optional && param.chained) {\n\t\t\tbuffered++;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// otherwise, if the matcher returns `false`, the route did not match\n\t\treturn;\n\t}\n\n\tif (buffered) return;\n\treturn result;\n}\n\n/** @param {string} str */\nfunction escape(str) {\n\treturn (\n\t\tstr\n\t\t\t.normalize()\n\t\t\t// escape [ and ] before escaping other characters, since they are used in the replacements\n\t\t\t.replace(/[[\\]]/g, '\\\\$&')\n\t\t\t// replace %, /, ? and # with their encoded versions because decode_pathname leaves them untouched\n\t\t\t.replace(/%/g, '%25')\n\t\t\t.replace(/\\//g, '%2[Ff]')\n\t\t\t.replace(/\\?/g, '%3[Ff]')\n\t\t\t.replace(/#/g, '%23')\n\t\t\t// escape characters that have special meaning in regex\n\t\t\t.replace(/[.*+?^${}()|\\\\]/g, '\\\\$&')\n\t);\n}\n\nconst basic_param_pattern = /\\[(\\[)?(\\.\\.\\.)?(\\w+?)(?:=(\\w+))?\\]\\]?/g;\n\n/**\n * Populate a route ID with params to resolve a pathname.\n * @example\n * ```js\n * resolveRoute(\n *   `/blog/[slug]/[...somethingElse]`,\n *   {\n *     slug: 'hello-world',\n *     somethingElse: 'something/else'\n *   }\n * ); // `/blog/hello-world/something/else`\n * ```\n * @param {string} id\n * @param {Record<string, string | undefined>} params\n * @returns {string}\n */\nexport function resolve_route(id, params) {\n\tconst segments = get_route_segments(id);\n\treturn (\n\t\t'/' +\n\t\tsegments\n\t\t\t.map((segment) =>\n\t\t\t\tsegment.replace(basic_param_pattern, (_, optional, rest, name) => {\n\t\t\t\t\tconst param_value = params[name];\n\n\t\t\t\t\t// This is nested so TS correctly narrows the type\n\t\t\t\t\tif (!param_value) {\n\t\t\t\t\t\tif (optional) return '';\n\t\t\t\t\t\tif (rest && param_value !== undefined) return '';\n\t\t\t\t\t\tthrow new Error(`Missing parameter '${name}' in route ${id}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (param_value.startsWith('/') || param_value.endsWith('/'))\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Parameter '${name}' in route ${id} cannot start or end with a slash -- this would cause an invalid route like foo//bar`\n\t\t\t\t\t\t);\n\t\t\t\t\treturn param_value;\n\t\t\t\t})\n\t\t\t)\n\t\t\t.filter(Boolean)\n\t\t\t.join('/')\n\t);\n}\n\n/**\n * @param {import('types').SSRNode} node\n * @returns {boolean}\n */\nexport function has_server_load(node) {\n\treturn node.server?.load !== undefined || node.server?.trailingSlash !== undefined;\n}\n","import { exec, parse_route_id } from '../../utils/routing.js';\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @returns {import('types').CSRRoute[]}\n */\nexport function parse({ nodes, server_loads, dictionary, matchers }) {\n\tconst layouts_with_server_load = new Set(server_loads);\n\n\treturn Object.entries(dictionary).map(([id, [leaf, layouts, errors]]) => {\n\t\tconst { pattern, params } = parse_route_id(id);\n\n\t\t/** @type {import('types').CSRRoute} */\n\t\tconst route = {\n\t\t\tid,\n\t\t\t/** @param {string} path */\n\t\t\texec: (path) => {\n\t\t\t\tconst match = pattern.exec(path);\n\t\t\t\tif (match) return exec(match, params, matchers);\n\t\t\t},\n\t\t\terrors: [1, ...(errors || [])].map((n) => nodes[n]),\n\t\t\tlayouts: [0, ...(layouts || [])].map(create_layout_loader),\n\t\t\tleaf: create_leaf_loader(leaf)\n\t\t};\n\n\t\t// bit of a hack, but ensures that layout/error node lists are the same\n\t\t// length, without which the wrong data will be applied if the route\n\t\t// manifest looks like `[[a, b], [c,], d]`\n\t\troute.errors.length = route.layouts.length = Math.max(\n\t\t\troute.errors.length,\n\t\t\troute.layouts.length\n\t\t);\n\n\t\treturn route;\n\t});\n\n\t/**\n\t * @param {number} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader]}\n\t */\n\tfunction create_leaf_loader(id) {\n\t\t// whether or not the route uses the server data is\n\t\t// encoded using the ones' complement, to save space\n\t\tconst uses_server_data = id < 0;\n\t\tif (uses_server_data) id = ~id;\n\t\treturn [uses_server_data, nodes[id]];\n\t}\n\n\t/**\n\t * @param {number | undefined} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader] | undefined}\n\t */\n\tfunction create_layout_loader(id) {\n\t\t// whether or not the layout uses the server data is\n\t\t// encoded in the layouts array, to save space\n\t\treturn id === undefined ? id : [layouts_with_server_load.has(id), nodes[id]];\n\t}\n}\n\n/**\n * @param {import('types').CSRRouteServer} input\n * @param {import('types').CSRPageNodeLoader[]} app_nodes Will be modified if a new node is loaded that's not already in the array\n * @returns {import('types').CSRRoute}\n */\nexport function parse_server_route({ nodes, id, leaf, layouts, errors }, app_nodes) {\n\treturn {\n\t\tid,\n\t\texec: () => ({}), // dummy function; exec already happened on the server\n\t\t// By writing to app_nodes only when a loader at that index is not already defined,\n\t\t// we ensure that loaders have referential equality when they load the same node.\n\t\t// Code elsewhere in client.js relies on this referential equality to determine\n\t\t// if a loader is different and should therefore (re-)run.\n\t\terrors: errors.map((n) => (n ? (app_nodes[n] ||= nodes[n]) : undefined)),\n\t\tlayouts: layouts.map((n) => (n ? [n[0], (app_nodes[n[1]] ||= nodes[n[1]])] : undefined)),\n\t\tleaf: [leaf[0], (app_nodes[leaf[1]] ||= nodes[leaf[1]])]\n\t};\n}\n","/**\n * Read a value from `sessionStorage`\n * @param {string} key\n * @param {(value: string) => any} parse\n */\nexport function get(key, parse = JSON.parse) {\n\ttry {\n\t\treturn parse(sessionStorage[key]);\n\t} catch {\n\t\t// do nothing\n\t}\n}\n\n/**\n * Write a value to `sessionStorage`\n * @param {string} key\n * @param {any} value\n * @param {(value: any) => string} stringify\n */\nexport function set(key, value, stringify = JSON.stringify) {\n\tconst data = stringify(value);\n\ttry {\n\t\tsessionStorage[key] = data;\n\t} catch {\n\t\t// do nothing\n\t}\n}\n","export const SNAPSHOT_KEY = 'sveltekit:snapshot';\nexport const SCROLL_KEY = 'sveltekit:scroll';\nexport const STATES_KEY = 'sveltekit:states';\nexport const PAGE_URL_KEY = 'sveltekit:pageurl';\n\nexport const HISTORY_INDEX = 'sveltekit:history';\nexport const NAVIGATION_INDEX = 'sveltekit:navigation';\n\nexport const PRELOAD_PRIORITIES = /** @type {const} */ ({\n\ttap: 1,\n\thover: 2,\n\tviewport: 3,\n\teager: 4,\n\toff: -1,\n\tfalse: -1\n});\n","import { BROWSER, DEV } from 'esm-env';\nimport { writable } from 'svelte/store';\nimport { assets } from '__sveltekit/paths';\nimport { version } from '__sveltekit/environment';\nimport { PRELOAD_PRIORITIES } from './constants.js';\n\n/* global __SVELTEKIT_APP_VERSION_FILE__, __SVELTEKIT_APP_VERSION_POLL_INTERVAL__ */\n\nexport const origin = BROWSER ? location.origin : '';\n\n/** @param {string | URL} url */\nexport function resolve_url(url) {\n\tif (url instanceof URL) return url;\n\n\tlet baseURI = document.baseURI;\n\n\tif (!baseURI) {\n\t\tconst baseTags = document.getElementsByTagName('base');\n\t\tbaseURI = baseTags.length ? baseTags[0].href : document.URL;\n\t}\n\n\treturn new URL(url, baseURI);\n}\n\nexport function scroll_state() {\n\treturn {\n\t\tx: pageXOffset,\n\t\ty: pageYOffset\n\t};\n}\n\nconst warned = new WeakSet();\n\n/** @typedef {keyof typeof valid_link_options} LinkOptionName */\n\nconst valid_link_options = /** @type {const} */ ({\n\t'preload-code': ['', 'off', 'false', 'tap', 'hover', 'viewport', 'eager'],\n\t'preload-data': ['', 'off', 'false', 'tap', 'hover'],\n\tkeepfocus: ['', 'true', 'off', 'false'],\n\tnoscroll: ['', 'true', 'off', 'false'],\n\treload: ['', 'true', 'off', 'false'],\n\treplacestate: ['', 'true', 'off', 'false']\n});\n\n/**\n * @template {LinkOptionName} T\n * @typedef {typeof valid_link_options[T][number]} ValidLinkOptions\n */\n\n/**\n * @template {LinkOptionName} T\n * @param {Element} element\n * @param {T} name\n */\nfunction link_option(element, name) {\n\tconst value = /** @type {ValidLinkOptions<T> | null} */ (\n\t\telement.getAttribute(`data-sveltekit-${name}`)\n\t);\n\n\tif (DEV) {\n\t\tvalidate_link_option(element, name, value);\n\t}\n\n\treturn value;\n}\n\n/**\n * @template {LinkOptionName} T\n * @template {ValidLinkOptions<T> | null} U\n * @param {Element} element\n * @param {T} name\n * @param {U} value\n */\nfunction validate_link_option(element, name, value) {\n\tif (value === null) return;\n\n\t// @ts-expect-error - includes is dumb\n\tif (!warned.has(element) && !valid_link_options[name].includes(value)) {\n\t\tconsole.error(\n\t\t\t`Unexpected value for ${name} — should be one of ${valid_link_options[name]\n\t\t\t\t.map((option) => JSON.stringify(option))\n\t\t\t\t.join(', ')}`,\n\t\t\telement\n\t\t);\n\n\t\twarned.add(element);\n\t}\n}\n\nconst levels = {\n\t...PRELOAD_PRIORITIES,\n\t'': PRELOAD_PRIORITIES.hover\n};\n\n/**\n * @param {Element} element\n * @returns {Element | null}\n */\nfunction parent_element(element) {\n\tlet parent = element.assignedSlot ?? element.parentNode;\n\n\t// @ts-expect-error handle shadow roots\n\tif (parent?.nodeType === 11) parent = parent.host;\n\n\treturn /** @type {Element} */ (parent);\n}\n\n/**\n * @param {Element} element\n * @param {Element} target\n */\nexport function find_anchor(element, target) {\n\twhile (element && element !== target) {\n\t\tif (element.nodeName.toUpperCase() === 'A' && element.hasAttribute('href')) {\n\t\t\treturn /** @type {HTMLAnchorElement | SVGAElement} */ (element);\n\t\t}\n\n\t\telement = /** @type {Element} */ (parent_element(element));\n\t}\n}\n\n/**\n * @param {HTMLAnchorElement | SVGAElement} a\n * @param {string} base\n * @param {boolean} uses_hash_router\n */\nexport function get_link_info(a, base, uses_hash_router) {\n\t/** @type {URL | undefined} */\n\tlet url;\n\n\ttry {\n\t\turl = new URL(a instanceof SVGAElement ? a.href.baseVal : a.href, document.baseURI);\n\n\t\t// if the hash doesn't start with `#/` then it's probably linking to an id on the current page\n\t\tif (uses_hash_router && url.hash.match(/^#[^/]/)) {\n\t\t\tconst route = location.hash.split('#')[1] || '/';\n\t\t\turl.hash = `#${route}${url.hash}`;\n\t\t}\n\t} catch {}\n\n\tconst target = a instanceof SVGAElement ? a.target.baseVal : a.target;\n\n\tconst external =\n\t\t!url ||\n\t\t!!target ||\n\t\tis_external_url(url, base, uses_hash_router) ||\n\t\t(a.getAttribute('rel') || '').split(/\\s+/).includes('external');\n\n\tconst download = url?.origin === origin && a.hasAttribute('download');\n\n\treturn { url, external, target, download };\n}\n\n/**\n * @param {HTMLFormElement | HTMLAnchorElement | SVGAElement} element\n */\nexport function get_router_options(element) {\n\t/** @type {ValidLinkOptions<'keepfocus'> | null} */\n\tlet keepfocus = null;\n\n\t/** @type {ValidLinkOptions<'noscroll'> | null} */\n\tlet noscroll = null;\n\n\t/** @type {ValidLinkOptions<'preload-code'> | null} */\n\tlet preload_code = null;\n\n\t/** @type {ValidLinkOptions<'preload-data'> | null} */\n\tlet preload_data = null;\n\n\t/** @type {ValidLinkOptions<'reload'> | null} */\n\tlet reload = null;\n\n\t/** @type {ValidLinkOptions<'replacestate'> | null} */\n\tlet replace_state = null;\n\n\t/** @type {Element} */\n\tlet el = element;\n\n\twhile (el && el !== document.documentElement) {\n\t\tif (preload_code === null) preload_code = link_option(el, 'preload-code');\n\t\tif (preload_data === null) preload_data = link_option(el, 'preload-data');\n\t\tif (keepfocus === null) keepfocus = link_option(el, 'keepfocus');\n\t\tif (noscroll === null) noscroll = link_option(el, 'noscroll');\n\t\tif (reload === null) reload = link_option(el, 'reload');\n\t\tif (replace_state === null) replace_state = link_option(el, 'replacestate');\n\n\t\tel = /** @type {Element} */ (parent_element(el));\n\t}\n\n\t/** @param {string | null} value */\n\tfunction get_option_state(value) {\n\t\tswitch (value) {\n\t\t\tcase '':\n\t\t\tcase 'true':\n\t\t\t\treturn true;\n\t\t\tcase 'off':\n\t\t\tcase 'false':\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\treturn {\n\t\tpreload_code: levels[preload_code ?? 'off'],\n\t\tpreload_data: levels[preload_data ?? 'off'],\n\t\tkeepfocus: get_option_state(keepfocus),\n\t\tnoscroll: get_option_state(noscroll),\n\t\treload: get_option_state(reload),\n\t\treplace_state: get_option_state(replace_state)\n\t};\n}\n\n/** @param {any} value */\nexport function notifiable_store(value) {\n\tconst store = writable(value);\n\tlet ready = true;\n\n\tfunction notify() {\n\t\tready = true;\n\t\tstore.update((val) => val);\n\t}\n\n\t/** @param {any} new_value */\n\tfunction set(new_value) {\n\t\tready = false;\n\t\tstore.set(new_value);\n\t}\n\n\t/** @param {(value: any) => void} run */\n\tfunction subscribe(run) {\n\t\t/** @type {any} */\n\t\tlet old_value;\n\t\treturn store.subscribe((new_value) => {\n\t\t\tif (old_value === undefined || (ready && new_value !== old_value)) {\n\t\t\t\trun((old_value = new_value));\n\t\t\t}\n\t\t});\n\t}\n\n\treturn { notify, set, subscribe };\n}\n\nexport const updated_listener = {\n\tv: () => {}\n};\n\nexport function create_updated_store() {\n\tconst { set, subscribe } = writable(false);\n\n\tif (DEV || !BROWSER) {\n\t\treturn {\n\t\t\tsubscribe,\n\t\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\t\tcheck: async () => false\n\t\t};\n\t}\n\n\tconst interval = __SVELTEKIT_APP_VERSION_POLL_INTERVAL__;\n\n\t/** @type {NodeJS.Timeout} */\n\tlet timeout;\n\n\t/** @type {() => Promise<boolean>} */\n\tasync function check() {\n\t\tclearTimeout(timeout);\n\n\t\tif (interval) timeout = setTimeout(check, interval);\n\n\t\ttry {\n\t\t\tconst res = await fetch(`${assets}/${__SVELTEKIT_APP_VERSION_FILE__}`, {\n\t\t\t\theaders: {\n\t\t\t\t\tpragma: 'no-cache',\n\t\t\t\t\t'cache-control': 'no-cache'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!res.ok) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst data = await res.json();\n\t\t\tconst updated = data.version !== version;\n\n\t\t\tif (updated) {\n\t\t\t\tset(true);\n\t\t\t\tupdated_listener.v();\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\n\t\t\treturn updated;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (interval) timeout = setTimeout(check, interval);\n\n\treturn {\n\t\tsubscribe,\n\t\tcheck\n\t};\n}\n\n/**\n * Is external if\n * - origin different\n * - path doesn't start with base\n * - uses hash router and pathname is more than base\n * @param {URL} url\n * @param {string} base\n * @param {boolean} hash_routing\n */\nexport function is_external_url(url, base, hash_routing) {\n\tif (url.origin !== origin || !url.pathname.startsWith(base)) {\n\t\treturn true;\n\t}\n\n\tif (hash_routing) {\n\t\tif (url.pathname === base + '/' || url.pathname === base + '/index.html') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// be lenient if serving from filesystem\n\t\tif (url.protocol === 'file:' && url.pathname.replace(/\\/[^/]+\\.html?$/, '') === base) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {Record<string, boolean>} */\nconst seen = {};\n\n/**\n * Used for server-side resolution, to replicate Vite's CSS loading behaviour in production.\n *\n * Closely modelled after https://github.com/vitejs/vite/blob/3dd12f4724130fdf8ba44c6d3252ebdff407fd47/packages/vite/src/node/plugins/importAnalysisBuild.ts#L214\n * (which ideally we could just use directly, but it's not exported)\n * @param {string[]} deps\n */\nexport function load_css(deps) {\n\tif (__SVELTEKIT_CLIENT_ROUTING__) return;\n\n\tconst csp_nonce_meta = /** @type {HTMLMetaElement} */ (\n\t\tdocument.querySelector('meta[property=csp-nonce]')\n\t);\n\tconst csp_nonce = csp_nonce_meta?.nonce || csp_nonce_meta?.getAttribute('nonce');\n\n\tfor (const dep of deps) {\n\t\tif (dep in seen) continue;\n\t\tseen[dep] = true;\n\n\t\tif (document.querySelector(`link[href=\"${dep}\"][rel=\"stylesheet\"]`)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.crossOrigin = '';\n\t\tlink.href = dep;\n\t\tif (csp_nonce) {\n\t\t\tlink.setAttribute('nonce', csp_nonce);\n\t\t}\n\t\tdocument.head.appendChild(link);\n\t}\n}\n","/**\n * Base64 Encodes an arraybuffer\n * @param {ArrayBuffer} arraybuffer\n * @returns {string}\n */\nexport function encode64(arraybuffer) {\n  const dv = new DataView(arraybuffer);\n  let binaryString = \"\";\n\n  for (let i = 0; i < arraybuffer.byteLength; i++) {\n    binaryString += String.fromCharCode(dv.getUint8(i));\n  }\n\n  return binaryToAscii(binaryString);\n}\n\n/**\n * Decodes a base64 string into an arraybuffer\n * @param {string} string\n * @returns {ArrayBuffer}\n */\nexport function decode64(string) {\n  const binaryString = asciiToBinary(string);\n  const arraybuffer = new ArrayBuffer(binaryString.length);\n  const dv = new DataView(arraybuffer);\n\n  for (let i = 0; i < arraybuffer.byteLength; i++) {\n    dv.setUint8(i, binaryString.charCodeAt(i));\n  }\n\n  return arraybuffer;\n}\n\nconst KEY_STRING =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n/**\n * Substitute for atob since it's deprecated in node.\n * Does not do any input validation.\n *\n * @see https://github.com/jsdom/abab/blob/master/lib/atob.js\n *\n * @param {string} data\n * @returns {string}\n */\nfunction asciiToBinary(data) {\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n\n  let output = \"\";\n  let buffer = 0;\n  let accumulatedBits = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    buffer <<= 6;\n    buffer |= KEY_STRING.indexOf(data[i]);\n    accumulatedBits += 6;\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n  }\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  return output;\n}\n\n/**\n * Substitute for btoa since it's deprecated in node.\n * Does not do any input validation.\n *\n * @see https://github.com/jsdom/abab/blob/master/lib/btoa.js\n *\n * @param {string} str\n * @returns {string}\n */\nfunction binaryToAscii(str) {\n  let out = \"\";\n  for (let i = 0; i < str.length; i += 3) {\n    /** @type {[number, number, number, number]} */\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = str.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (str.charCodeAt(i) & 0x03) << 4;\n    if (str.length > i + 1) {\n      groupsOfSix[1] |= str.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (str.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (str.length > i + 2) {\n      groupsOfSix[2] |= str.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = str.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += KEY_STRING[groupsOfSix[j]];\n      }\n    }\n  }\n  return out;\n}\n","/**\n * @param {Set<string>} expected\n */\nfunction validator(expected) {\n\t/**\n\t * @param {any} module\n\t * @param {string} [file]\n\t */\n\tfunction validate(module, file) {\n\t\tif (!module) return;\n\n\t\tfor (const key in module) {\n\t\t\tif (key[0] === '_' || expected.has(key)) continue; // key is valid in this module\n\n\t\t\tconst values = [...expected.values()];\n\n\t\t\tconst hint =\n\t\t\t\thint_for_supported_files(key, file?.slice(file.lastIndexOf('.'))) ??\n\t\t\t\t`valid exports are ${values.join(', ')}, or anything with a '_' prefix`;\n\n\t\t\tthrow new Error(`Invalid export '${key}'${file ? ` in ${file}` : ''} (${hint})`);\n\t\t}\n\t}\n\n\treturn validate;\n}\n\n/**\n * @param {string} key\n * @param {string} ext\n * @returns {string | void}\n */\nfunction hint_for_supported_files(key, ext = '.js') {\n\tconst supported_files = [];\n\n\tif (valid_layout_exports.has(key)) {\n\t\tsupported_files.push(`+layout${ext}`);\n\t}\n\n\tif (valid_page_exports.has(key)) {\n\t\tsupported_files.push(`+page${ext}`);\n\t}\n\n\tif (valid_layout_server_exports.has(key)) {\n\t\tsupported_files.push(`+layout.server${ext}`);\n\t}\n\n\tif (valid_page_server_exports.has(key)) {\n\t\tsupported_files.push(`+page.server${ext}`);\n\t}\n\n\tif (valid_server_exports.has(key)) {\n\t\tsupported_files.push(`+server${ext}`);\n\t}\n\n\tif (supported_files.length > 0) {\n\t\treturn `'${key}' is a valid export in ${supported_files.slice(0, -1).join(', ')}${\n\t\t\tsupported_files.length > 1 ? ' or ' : ''\n\t\t}${supported_files.at(-1)}`;\n\t}\n}\n\nconst valid_layout_exports = new Set([\n\t'load',\n\t'prerender',\n\t'csr',\n\t'ssr',\n\t'trailingSlash',\n\t'config'\n]);\nconst valid_page_exports = new Set([...valid_layout_exports, 'entries']);\nconst valid_layout_server_exports = new Set([...valid_layout_exports]);\nconst valid_page_server_exports = new Set([...valid_layout_server_exports, 'actions', 'entries']);\nconst valid_server_exports = new Set([\n\t'GET',\n\t'POST',\n\t'PATCH',\n\t'PUT',\n\t'DELETE',\n\t'OPTIONS',\n\t'HEAD',\n\t'fallback',\n\t'prerender',\n\t'trailingSlash',\n\t'config',\n\t'entries'\n]);\n\nexport const validate_layout_exports = validator(valid_layout_exports);\nexport const validate_page_exports = validator(valid_page_exports);\nexport const validate_layout_server_exports = validator(valid_layout_server_exports);\nexport const validate_page_server_exports = validator(valid_page_server_exports);\nexport const validate_server_exports = validator(valid_server_exports);\n","export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * An error that was thrown from within the SvelteKit runtime that is not fatal and doesn't result in a 500, such as a 404.\n * `SvelteKitError` goes through `handleError`.\n * @extends Error\n */\nexport class SvelteKitError extends Error {\n\t/**\n\t * @param {number} status\n\t * @param {string} text\n\t * @param {string} message\n\t */\n\tconstructor(status, text, message) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.text = text;\n\t}\n}\n\n/**\n * @template {Record<string, unknown> | undefined} [T=undefined]\n */\nexport class ActionFailure {\n\t/**\n\t * @param {number} status\n\t * @param {T} data\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n\n/**\n * This is a grotesque hack that, in dev, allows us to replace the implementations\n * of these classes that you'd get by importing them from `@sveltejs/kit` with the\n * ones that are imported via Vite and loaded internally, so that instanceof\n * checks work even though SvelteKit imports this module via Vite and consumers\n * import it via Node\n * @param {{\n *   ActionFailure: typeof ActionFailure;\n *   HttpError: typeof HttpError;\n *   Redirect: typeof Redirect;\n *   SvelteKitError: typeof SvelteKitError;\n * }} implementations\n */\nexport function replace_implementations(implementations) {\n\t// @ts-expect-error\n\tActionFailure = implementations.ActionFailure; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tHttpError = implementations.HttpError; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tRedirect = implementations.Redirect; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tSvelteKitError = implementations.SvelteKitError; // eslint-disable-line no-class-assign\n}\n","import { HttpError, SvelteKitError } from '../runtime/control.js';\n\n/**\n * @param {unknown} err\n * @return {Error}\n */\nexport function coalesce_to_error(err) {\n\treturn err instanceof Error ||\n\t\t(err && /** @type {any} */ (err).name && /** @type {any} */ (err).message)\n\t\t? /** @type {Error} */ (err)\n\t\t: new Error(JSON.stringify(err));\n}\n\n/**\n * This is an identity function that exists to make TypeScript less\n * paranoid about people throwing things that aren't errors, which\n * frankly is not something we should care about\n * @param {unknown} error\n */\nexport function normalize_error(error) {\n\treturn /** @type {import('../runtime/control.js').Redirect | HttpError | SvelteKitError | Error} */ (\n\t\terror\n\t);\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_status(error) {\n\treturn error instanceof HttpError || error instanceof SvelteKitError ? error.status : 500;\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_message(error) {\n\treturn error instanceof SvelteKitError ? error.text : 'Internal Error';\n}\n","import { onMount } from 'svelte';\nimport { updated_listener } from './utils.js';\n\n/** @type {import('@sveltejs/kit').Page} */\nexport let page;\n\n/** @type {{ current: import('@sveltejs/kit').Navigation | null }} */\nexport let navigating;\n\n/** @type {{ current: boolean }} */\nexport let updated;\n\n// this is a bootleg way to tell if we're in old svelte or new svelte\nconst is_legacy =\n\tonMount.toString().includes('$$') || /function \\w+\\(\\) \\{\\}/.test(onMount.toString());\n\nif (is_legacy) {\n\tpage = {\n\t\tdata: {},\n\t\tform: null,\n\t\terror: null,\n\t\tparams: {},\n\t\troute: { id: null },\n\t\tstate: {},\n\t\tstatus: -1,\n\t\turl: new URL('https://example.com')\n\t};\n\tnavigating = { current: null };\n\tupdated = { current: false };\n} else {\n\tpage = new (class Page {\n\t\tdata = $state.raw({});\n\t\tform = $state.raw(null);\n\t\terror = $state.raw(null);\n\t\tparams = $state.raw({});\n\t\troute = $state.raw({ id: null });\n\t\tstate = $state.raw({});\n\t\tstatus = $state.raw(-1);\n\t\turl = $state.raw(new URL('https://example.com'));\n\t})();\n\n\tnavigating = new (class Navigating {\n\t\tcurrent = $state.raw(null);\n\t})();\n\n\tupdated = new (class Updated {\n\t\tcurrent = $state.raw(false);\n\t})();\n\tupdated_listener.v = () => (updated.current = true);\n}\n\n/**\n * @param {import('@sveltejs/kit').Page} new_page\n */\nexport function update(new_page) {\n\tObject.assign(page, new_page);\n}\n","import { BROWSER, DEV } from 'esm-env';\nimport { onMount, tick } from 'svelte';\nimport {\n\tdecode_params,\n\tdecode_pathname,\n\tstrip_hash,\n\tmake_trackable,\n\tnormalize_path\n} from '../../utils/url.js';\nimport { dev_fetch, initial_fetch, lock_fetch, subsequent_fetch, unlock_fetch } from './fetcher.js';\nimport { parse, parse_server_route } from './parse.js';\nimport * as storage from './session-storage.js';\nimport {\n\tfind_anchor,\n\tresolve_url,\n\tget_link_info,\n\tget_router_options,\n\tis_external_url,\n\torigin,\n\tscroll_state,\n\tnotifiable_store,\n\tcreate_updated_store,\n\tload_css\n} from './utils.js';\nimport { base } from '__sveltekit/paths';\nimport * as devalue from 'devalue';\nimport {\n\tHISTORY_INDEX,\n\tNAVIGATION_INDEX,\n\tPRELOAD_PRIORITIES,\n\tSCROLL_KEY,\n\tSTATES_KEY,\n\tSNAPSHOT_KEY,\n\tPAGE_URL_KEY\n} from './constants.js';\nimport { validate_page_exports } from '../../utils/exports.js';\nimport { compact } from '../../utils/array.js';\nimport { HttpError, Redirect, SvelteKitError } from '../control.js';\nimport { INVALIDATED_PARAM, TRAILING_SLASH_PARAM, validate_depends } from '../shared.js';\nimport { get_message, get_status } from '../../utils/error.js';\nimport { writable } from 'svelte/store';\nimport { page, update, navigating } from './state.svelte.js';\nimport { add_data_suffix, add_resolution_suffix } from '../pathname.js';\n\nexport { load_css };\n\nconst ICON_REL_ATTRIBUTES = new Set(['icon', 'shortcut icon', 'apple-touch-icon']);\n\nlet errored = false;\n\n// We track the scroll position associated with each history entry in sessionStorage,\n// rather than on history.state itself, because when navigation is driven by\n// popstate it's too late to update the scroll position associated with the\n// state we're navigating from\n/**\n * history index -> { x, y }\n * @type {Record<number, { x: number; y: number }>}\n */\nconst scroll_positions = storage.get(SCROLL_KEY) ?? {};\n\n/**\n * navigation index -> any\n * @type {Record<string, any[]>}\n */\nconst snapshots = storage.get(SNAPSHOT_KEY) ?? {};\n\nif (DEV && BROWSER) {\n\tlet warned = false;\n\n\tconst current_module_url = import.meta.url.split('?')[0]; // remove query params that vite adds to the URL when it is loaded from node_modules\n\n\tconst warn = () => {\n\t\tif (warned) return;\n\n\t\t// Rather than saving a pointer to the original history methods, which would prevent monkeypatching by other libs,\n\t\t// inspect the stack trace to see if we're being called from within SvelteKit.\n\t\tlet stack = new Error().stack?.split('\\n');\n\t\tif (!stack) return;\n\t\tif (!stack[0].includes('https:') && !stack[0].includes('http:')) stack = stack.slice(1); // Chrome includes the error message in the stack\n\t\tstack = stack.slice(2); // remove `warn` and the place where `warn` was called\n\t\t// Can be falsy if was called directly from an anonymous function\n\t\tif (stack[0]?.includes(current_module_url)) return;\n\n\t\twarned = true;\n\n\t\tconsole.warn(\n\t\t\t\"Avoid using `history.pushState(...)` and `history.replaceState(...)` as these will conflict with SvelteKit's router. Use the `pushState` and `replaceState` imports from `$app/navigation` instead.\"\n\t\t);\n\t};\n\n\tconst push_state = history.pushState;\n\thistory.pushState = (...args) => {\n\t\twarn();\n\t\treturn push_state.apply(history, args);\n\t};\n\n\tconst replace_state = history.replaceState;\n\thistory.replaceState = (...args) => {\n\t\twarn();\n\t\treturn replace_state.apply(history, args);\n\t};\n}\n\nexport const stores = {\n\turl: /* @__PURE__ */ notifiable_store({}),\n\tpage: /* @__PURE__ */ notifiable_store({}),\n\tnavigating: /* @__PURE__ */ writable(\n\t\t/** @type {import('@sveltejs/kit').Navigation | null} */ (null)\n\t),\n\tupdated: /* @__PURE__ */ create_updated_store()\n};\n\n/** @param {number} index */\nfunction update_scroll_positions(index) {\n\tscroll_positions[index] = scroll_state();\n}\n\n/**\n * @param {number} current_history_index\n * @param {number} current_navigation_index\n */\nfunction clear_onward_history(current_history_index, current_navigation_index) {\n\t// if we navigated back, then pushed a new state, we can\n\t// release memory by pruning the scroll/snapshot lookup\n\tlet i = current_history_index + 1;\n\twhile (scroll_positions[i]) {\n\t\tdelete scroll_positions[i];\n\t\ti += 1;\n\t}\n\n\ti = current_navigation_index + 1;\n\twhile (snapshots[i]) {\n\t\tdelete snapshots[i];\n\t\ti += 1;\n\t}\n}\n\n/**\n * Loads `href` the old-fashioned way, with a full page reload.\n * Returns a `Promise` that never resolves (to prevent any\n * subsequent work, e.g. history manipulation, from happening)\n * @param {URL} url\n */\nfunction native_navigation(url) {\n\tlocation.href = url.href;\n\treturn new Promise(() => {});\n}\n\n/**\n * Checks whether a service worker is registered, and if it is,\n * tries to update it.\n */\nasync function update_service_worker() {\n\tif ('serviceWorker' in navigator) {\n\t\tconst registration = await navigator.serviceWorker.getRegistration(base || '/');\n\t\tif (registration) {\n\t\t\tawait registration.update();\n\t\t}\n\t}\n}\n\nfunction noop() {}\n\n/** @type {import('types').CSRRoute[]} All routes of the app. Only available when kit.router.resolution=client */\nlet routes;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_layout_loader;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_error_loader;\n/** @type {HTMLElement} */\nlet container;\n/** @type {HTMLElement} */\nlet target;\n/** @type {import('./types.js').SvelteKitApp} */\nexport let app;\n\n/** @type {Array<((url: URL) => boolean)>} */\nconst invalidated = [];\n\n/**\n * An array of the `+layout.svelte` and `+page.svelte` component instances\n * that currently live on the page — used for capturing and restoring snapshots.\n * It's updated/manipulated through `bind:this` in `Root.svelte`.\n * @type {import('svelte').SvelteComponent[]}\n */\nconst components = [];\n\n/** @type {{id: string, token: {}, promise: Promise<import('./types.js').NavigationResult>} | null} */\nlet load_cache = null;\n\n/**\n * Note on before_navigate_callbacks, on_navigate_callbacks and after_navigate_callbacks:\n * do not re-assign as some closures keep references to these Sets\n */\n/** @type {Set<(navigation: import('@sveltejs/kit').BeforeNavigate) => void>} */\nconst before_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>>} */\nconst on_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').AfterNavigate) => void>} */\nconst after_navigate_callbacks = new Set();\n\n/** @type {import('./types.js').NavigationState} */\nlet current = {\n\tbranch: [],\n\terror: null,\n\t// @ts-ignore - we need the initial value to be null\n\turl: null\n};\n\n/** this being true means we SSR'd */\nlet hydrated = false;\nlet started = false;\nlet autoscroll = true;\nlet updating = false;\nlet is_navigating = false;\nlet hash_navigating = false;\n/** True as soon as there happened one client-side navigation (excluding the SvelteKit-initialized initial one when in SPA mode) */\nlet has_navigated = false;\n\nlet force_invalidation = false;\n\n/** @type {import('svelte').SvelteComponent} */\nlet root;\n\n/** @type {number} keeping track of the history index in order to prevent popstate navigation events if needed */\nlet current_history_index;\n\n/** @type {number} */\nlet current_navigation_index;\n\n/** @type {{}} */\nlet token;\n\n/**\n * A set of tokens which are associated to current preloads.\n * If a preload becomes a real navigation, it's removed from the set.\n * If a preload token is in the set and the preload errors, the error\n * handling logic (for example reloading) is skipped.\n */\nconst preload_tokens = new Set();\n\n/** @type {Promise<void> | null} */\nlet pending_invalidate;\n\n/**\n * @param {import('./types.js').SvelteKitApp} _app\n * @param {HTMLElement} _target\n * @param {Parameters<typeof _hydrate>[1]} [hydrate]\n */\nexport async function start(_app, _target, hydrate) {\n\tif (DEV && _target === document.body) {\n\t\tconsole.warn(\n\t\t\t'Placing %sveltekit.body% directly inside <body> is not recommended, as your app may break for users who have certain browser extensions installed.\\n\\nConsider wrapping it in an element:\\n\\n<div style=\"display: contents\">\\n  %sveltekit.body%\\n</div>'\n\t\t);\n\t}\n\n\t// detect basic auth credentials in the current URL\n\t// https://github.com/sveltejs/kit/pull/11179\n\t// if so, refresh the page without credentials\n\tif (document.URL !== location.href) {\n\t\t// eslint-disable-next-line no-self-assign\n\t\tlocation.href = location.href;\n\t}\n\n\tapp = _app;\n\n\tawait _app.hooks.init?.();\n\n\troutes = __SVELTEKIT_CLIENT_ROUTING__ ? parse(_app) : [];\n\tcontainer = __SVELTEKIT_EMBEDDED__ ? _target : document.documentElement;\n\ttarget = _target;\n\n\t// we import the root layout/error nodes eagerly, so that\n\t// connectivity errors after initialisation don't nuke the app\n\tdefault_layout_loader = _app.nodes[0];\n\tdefault_error_loader = _app.nodes[1];\n\tvoid default_layout_loader();\n\tvoid default_error_loader();\n\n\tcurrent_history_index = history.state?.[HISTORY_INDEX];\n\tcurrent_navigation_index = history.state?.[NAVIGATION_INDEX];\n\n\tif (!current_history_index) {\n\t\t// we use Date.now() as an offset so that cross-document navigations\n\t\t// within the app don't result in data loss\n\t\tcurrent_history_index = current_navigation_index = Date.now();\n\n\t\t// create initial history entry, so we can return here\n\t\thistory.replaceState(\n\t\t\t{\n\t\t\t\t...history.state,\n\t\t\t\t[HISTORY_INDEX]: current_history_index,\n\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t},\n\t\t\t''\n\t\t);\n\t}\n\n\t// if we reload the page, or Cmd-Shift-T back to it,\n\t// recover scroll position\n\tconst scroll = scroll_positions[current_history_index];\n\tif (scroll) {\n\t\thistory.scrollRestoration = 'manual';\n\t\tscrollTo(scroll.x, scroll.y);\n\t}\n\n\tif (hydrate) {\n\t\tawait _hydrate(target, hydrate);\n\t} else {\n\t\tawait goto(app.hash ? decode_hash(new URL(location.href)) : location.href, {\n\t\t\treplaceState: true\n\t\t});\n\t}\n\n\t_start_router();\n}\n\nasync function _invalidate() {\n\t// Accept all invalidations as they come, don't swallow any while another invalidation\n\t// is running because subsequent invalidations may make earlier ones outdated,\n\t// but batch multiple synchronous invalidations.\n\tawait (pending_invalidate ||= Promise.resolve());\n\tif (!pending_invalidate) return;\n\tpending_invalidate = null;\n\n\tconst nav_token = (token = {});\n\tconst intent = await get_navigation_intent(current.url, true);\n\n\t// Clear preload, it might be affected by the invalidation.\n\t// Also solves an edge case where a preload is triggered, the navigation for it\n\t// was then triggered and is still running while the invalidation kicks in,\n\t// at which point the invalidation should take over and \"win\".\n\tload_cache = null;\n\n\tconst navigation_result = intent && (await load_route(intent));\n\tif (!navigation_result || nav_token !== token) return;\n\n\tif (navigation_result.type === 'redirect') {\n\t\treturn _goto(new URL(navigation_result.location, current.url).href, {}, 1, nav_token);\n\t}\n\n\tif (navigation_result.props.page) {\n\t\tObject.assign(page, navigation_result.props.page);\n\t}\n\tcurrent = navigation_result.state;\n\treset_invalidation();\n\troot.$set(navigation_result.props);\n\tupdate(navigation_result.props.page);\n}\n\nfunction reset_invalidation() {\n\tinvalidated.length = 0;\n\tforce_invalidation = false;\n}\n\n/** @param {number} index */\nfunction capture_snapshot(index) {\n\tif (components.some((c) => c?.snapshot)) {\n\t\tsnapshots[index] = components.map((c) => c?.snapshot?.capture());\n\t}\n}\n\n/** @param {number} index */\nfunction restore_snapshot(index) {\n\tsnapshots[index]?.forEach((value, i) => {\n\t\tcomponents[i]?.snapshot?.restore(value);\n\t});\n}\n\nfunction persist_state() {\n\tupdate_scroll_positions(current_history_index);\n\tstorage.set(SCROLL_KEY, scroll_positions);\n\n\tcapture_snapshot(current_navigation_index);\n\tstorage.set(SNAPSHOT_KEY, snapshots);\n}\n\n/**\n * @param {string | URL} url\n * @param {{ replaceState?: boolean; noScroll?: boolean; keepFocus?: boolean; invalidateAll?: boolean; invalidate?: Array<string | URL | ((url: URL) => boolean)>; state?: Record<string, any> }} options\n * @param {number} redirect_count\n * @param {{}} [nav_token]\n */\nasync function _goto(url, options, redirect_count, nav_token) {\n\treturn navigate({\n\t\ttype: 'goto',\n\t\turl: resolve_url(url),\n\t\tkeepfocus: options.keepFocus,\n\t\tnoscroll: options.noScroll,\n\t\treplace_state: options.replaceState,\n\t\tstate: options.state,\n\t\tredirect_count,\n\t\tnav_token,\n\t\taccept: () => {\n\t\t\tif (options.invalidateAll) {\n\t\t\t\tforce_invalidation = true;\n\t\t\t}\n\n\t\t\tif (options.invalidate) {\n\t\t\t\toptions.invalidate.forEach(push_invalidated);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/** @param {import('./types.js').NavigationIntent} intent */\nasync function _preload_data(intent) {\n\t// Reuse the existing pending preload if it's for the same navigation.\n\t// Prevents an edge case where same preload is triggered multiple times,\n\t// then a later one is becoming the real navigation and the preload tokens\n\t// get out of sync.\n\tif (intent.id !== load_cache?.id) {\n\t\tconst preload = {};\n\t\tpreload_tokens.add(preload);\n\t\tload_cache = {\n\t\t\tid: intent.id,\n\t\t\ttoken: preload,\n\t\t\tpromise: load_route({ ...intent, preload }).then((result) => {\n\t\t\t\tpreload_tokens.delete(preload);\n\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t// Don't cache errors, because they might be transient\n\t\t\t\t\tload_cache = null;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t})\n\t\t};\n\t}\n\n\treturn load_cache.promise;\n}\n\n/**\n * @param {URL} url\n * @returns {Promise<void>}\n */\nasync function _preload_code(url) {\n\tconst route = (await get_navigation_intent(url, false))?.route;\n\n\tif (route) {\n\t\tawait Promise.all([...route.layouts, route.leaf].map((load) => load?.[1]()));\n\t}\n}\n\n/**\n * @param {import('./types.js').NavigationFinished} result\n * @param {HTMLElement} target\n * @param {boolean} hydrate\n */\nfunction initialize(result, target, hydrate) {\n\tif (DEV && result.state.error && document.querySelector('vite-error-overlay')) return;\n\n\tcurrent = result.state;\n\n\tconst style = document.querySelector('style[data-sveltekit]');\n\tif (style) style.remove();\n\n\tObject.assign(page, /** @type {import('@sveltejs/kit').Page} */ (result.props.page));\n\n\troot = new app.root({\n\t\ttarget,\n\t\tprops: { ...result.props, stores, components },\n\t\thydrate,\n\t\t// @ts-ignore Svelte 5 specific: asynchronously instantiate the component, i.e. don't call flushSync\n\t\tsync: false\n\t});\n\n\trestore_snapshot(current_navigation_index);\n\n\t/** @type {import('@sveltejs/kit').AfterNavigate} */\n\tconst navigation = {\n\t\tfrom: null,\n\t\tto: {\n\t\t\tparams: current.params,\n\t\t\troute: { id: current.route?.id ?? null },\n\t\t\turl: new URL(location.href)\n\t\t},\n\t\twillUnload: false,\n\t\ttype: 'enter',\n\t\tcomplete: Promise.resolve()\n\t};\n\n\tafter_navigate_callbacks.forEach((fn) => fn(navigation));\n\n\tstarted = true;\n}\n\n/**\n *\n * @param {{\n *   url: URL;\n *   params: Record<string, string>;\n *   branch: Array<import('./types.js').BranchNode | undefined>;\n *   status: number;\n *   error: App.Error | null;\n *   route: import('types').CSRRoute | null;\n *   form?: Record<string, any> | null;\n * }} opts\n */\nfunction get_navigation_result_from_branch({ url, params, branch, status, error, route, form }) {\n\t/** @type {import('types').TrailingSlash} */\n\tlet slash = 'never';\n\n\t// if `paths.base === '/a/b/c`, then the root route is always `/a/b/c/`, regardless of\n\t// the `trailingSlash` route option, so that relative paths to JS and CSS work\n\tif (base && (url.pathname === base || url.pathname === base + '/')) {\n\t\tslash = 'always';\n\t} else {\n\t\tfor (const node of branch) {\n\t\t\tif (node?.slash !== undefined) slash = node.slash;\n\t\t}\n\t}\n\n\turl.pathname = normalize_path(url.pathname, slash);\n\n\t// eslint-disable-next-line\n\turl.search = url.search; // turn `/?` into `/`\n\n\t/** @type {import('./types.js').NavigationFinished} */\n\tconst result = {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\terror,\n\t\t\troute\n\t\t},\n\t\tprops: {\n\t\t\t// @ts-ignore Somehow it's getting SvelteComponent and SvelteComponentDev mixed up\n\t\t\tconstructors: compact(branch).map((branch_node) => branch_node.node.component),\n\t\t\tpage: clone_page(page)\n\t\t}\n\t};\n\n\tif (form !== undefined) {\n\t\tresult.props.form = form;\n\t}\n\n\tlet data = {};\n\tlet data_changed = !page;\n\n\tlet p = 0;\n\n\tfor (let i = 0; i < Math.max(branch.length, current.branch.length); i += 1) {\n\t\tconst node = branch[i];\n\t\tconst prev = current.branch[i];\n\n\t\tif (node?.data !== prev?.data) data_changed = true;\n\t\tif (!node) continue;\n\n\t\tdata = { ...data, ...node.data };\n\n\t\t// Only set props if the node actually updated. This prevents needless rerenders.\n\t\tif (data_changed) {\n\t\t\tresult.props[`data_${p}`] = data;\n\t\t}\n\n\t\tp += 1;\n\t}\n\n\tconst page_changed =\n\t\t!current.url ||\n\t\turl.href !== current.url.href ||\n\t\tcurrent.error !== error ||\n\t\t(form !== undefined && form !== page.form) ||\n\t\tdata_changed;\n\n\tif (page_changed) {\n\t\tresult.props.page = {\n\t\t\terror,\n\t\t\tparams,\n\t\t\troute: {\n\t\t\t\tid: route?.id ?? null\n\t\t\t},\n\t\t\tstate: {},\n\t\t\tstatus,\n\t\t\turl: new URL(url),\n\t\t\tform: form ?? null,\n\t\t\t// The whole page store is updated, but this way the object reference stays the same\n\t\t\tdata: data_changed ? data : page.data\n\t\t};\n\t}\n\n\treturn result;\n}\n\n/**\n * Call the universal load function of the given node, if it exists.\n *\n * @param {{\n *   loader: import('types').CSRPageNodeLoader;\n * \t parent: () => Promise<Record<string, any>>;\n *   url: URL;\n *   params: Record<string, string>;\n *   route: { id: string | null };\n * \t server_data_node: import('./types.js').DataNode | null;\n * }} options\n * @returns {Promise<import('./types.js').BranchNode>}\n */\nasync function load_node({ loader, parent, url, params, route, server_data_node }) {\n\t/** @type {Record<string, any> | null} */\n\tlet data = null;\n\n\tlet is_tracking = true;\n\n\t/** @type {import('types').Uses} */\n\tconst uses = {\n\t\tdependencies: new Set(),\n\t\tparams: new Set(),\n\t\tparent: false,\n\t\troute: false,\n\t\turl: false,\n\t\tsearch_params: new Set()\n\t};\n\n\tconst node = await loader();\n\n\tif (DEV) {\n\t\tvalidate_page_exports(node.universal);\n\n\t\tif (node.universal && app.hash) {\n\t\t\tconst options = Object.keys(node.universal).filter((o) => o !== 'load');\n\n\t\t\tif (options.length > 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Page options are ignored when \\`router.type === 'hash'\\` (${route.id} has ${options\n\t\t\t\t\t\t.filter((o) => o !== 'load')\n\t\t\t\t\t\t.map((o) => `'${o}'`)\n\t\t\t\t\t\t.join(', ')})`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (node.universal?.load) {\n\t\t/** @param {string[]} deps */\n\t\tfunction depends(...deps) {\n\t\t\tfor (const dep of deps) {\n\t\t\t\tif (DEV) validate_depends(/** @type {string} */ (route.id), dep);\n\n\t\t\t\tconst { href } = new URL(dep, url);\n\t\t\t\tuses.dependencies.add(href);\n\t\t\t}\n\t\t}\n\n\t\t/** @type {import('@sveltejs/kit').LoadEvent} */\n\t\tconst load_input = {\n\t\t\troute: new Proxy(route, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.route = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {'id'} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tparams: new Proxy(params, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.params.add(/** @type {string} */ (key));\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {string} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tdata: server_data_node?.data ?? null,\n\t\t\turl: make_trackable(\n\t\t\t\turl,\n\t\t\t\t() => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.url = true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(param) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.search_params.add(param);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tapp.hash\n\t\t\t),\n\t\t\tasync fetch(resource, init) {\n\t\t\t\t/** @type {URL | string} */\n\t\t\t\tlet requested;\n\n\t\t\t\tif (resource instanceof Request) {\n\t\t\t\t\trequested = resource.url;\n\n\t\t\t\t\t// we're not allowed to modify the received `Request` object, so in order\n\t\t\t\t\t// to fixup relative urls we create a new equivalent `init` object instead\n\t\t\t\t\tinit = {\n\t\t\t\t\t\t// the request body must be consumed in memory until browsers\n\t\t\t\t\t\t// implement streaming request bodies and/or the body getter\n\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\tresource.method === 'GET' || resource.method === 'HEAD'\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: await resource.blob(),\n\t\t\t\t\t\tcache: resource.cache,\n\t\t\t\t\t\tcredentials: resource.credentials,\n\t\t\t\t\t\t// the headers are undefined on the server if the Headers object is empty\n\t\t\t\t\t\t// so we need to make sure they are also undefined here if there are no headers\n\t\t\t\t\t\theaders: [...resource.headers].length ? resource.headers : undefined,\n\t\t\t\t\t\tintegrity: resource.integrity,\n\t\t\t\t\t\tkeepalive: resource.keepalive,\n\t\t\t\t\t\tmethod: resource.method,\n\t\t\t\t\t\tmode: resource.mode,\n\t\t\t\t\t\tredirect: resource.redirect,\n\t\t\t\t\t\treferrer: resource.referrer,\n\t\t\t\t\t\treferrerPolicy: resource.referrerPolicy,\n\t\t\t\t\t\tsignal: resource.signal,\n\t\t\t\t\t\t...init\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\trequested = resource;\n\t\t\t\t}\n\n\t\t\t\t// we must fixup relative urls so they are resolved from the target page\n\t\t\t\tconst resolved = new URL(requested, url);\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tdepends(resolved.href);\n\t\t\t\t}\n\n\t\t\t\t// match ssr serialized data url, which is important to find cached responses\n\t\t\t\tif (resolved.origin === url.origin) {\n\t\t\t\t\trequested = resolved.href.slice(url.origin.length);\n\t\t\t\t}\n\n\t\t\t\t// prerendered pages may be served from any origin, so `initial_fetch` urls shouldn't be resolved\n\t\t\t\treturn started\n\t\t\t\t\t? subsequent_fetch(requested, resolved.href, init)\n\t\t\t\t\t: initial_fetch(requested, init);\n\t\t\t},\n\t\t\tsetHeaders: () => {}, // noop\n\t\t\tdepends,\n\t\t\tparent() {\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tuses.parent = true;\n\t\t\t\t}\n\t\t\t\treturn parent();\n\t\t\t},\n\t\t\tuntrack(fn) {\n\t\t\t\tis_tracking = false;\n\t\t\t\ttry {\n\t\t\t\t\treturn fn();\n\t\t\t\t} finally {\n\t\t\t\t\tis_tracking = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (DEV) {\n\t\t\ttry {\n\t\t\t\tlock_fetch();\n\t\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t\t\tif (data != null && Object.getPrototypeOf(data) !== Object.prototype) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`a load function related to route '${route.id}' returned ${\n\t\t\t\t\t\t\ttypeof data !== 'object'\n\t\t\t\t\t\t\t\t? `a ${typeof data}`\n\t\t\t\t\t\t\t\t: data instanceof Response\n\t\t\t\t\t\t\t\t\t? 'a Response object'\n\t\t\t\t\t\t\t\t\t: Array.isArray(data)\n\t\t\t\t\t\t\t\t\t\t? 'an array'\n\t\t\t\t\t\t\t\t\t\t: 'a non-plain object'\n\t\t\t\t\t\t}, but must return a plain object at the top level (i.e. \\`return {...}\\`)`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tunlock_fetch();\n\t\t\t}\n\t\t} else {\n\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t}\n\t}\n\n\treturn {\n\t\tnode,\n\t\tloader,\n\t\tserver: server_data_node,\n\t\tuniversal: node.universal?.load ? { type: 'data', data, uses } : null,\n\t\tdata: data ?? server_data_node?.data ?? null,\n\t\tslash: node.universal?.trailingSlash ?? server_data_node?.slash\n\t};\n}\n\n/**\n * @param {boolean} parent_changed\n * @param {boolean} route_changed\n * @param {boolean} url_changed\n * @param {Set<string>} search_params_changed\n * @param {import('types').Uses | undefined} uses\n * @param {Record<string, string>} params\n */\nfunction has_changed(\n\tparent_changed,\n\troute_changed,\n\turl_changed,\n\tsearch_params_changed,\n\tuses,\n\tparams\n) {\n\tif (force_invalidation) return true;\n\n\tif (!uses) return false;\n\n\tif (uses.parent && parent_changed) return true;\n\tif (uses.route && route_changed) return true;\n\tif (uses.url && url_changed) return true;\n\n\tfor (const tracked_params of uses.search_params) {\n\t\tif (search_params_changed.has(tracked_params)) return true;\n\t}\n\n\tfor (const param of uses.params) {\n\t\tif (params[param] !== current.params[param]) return true;\n\t}\n\n\tfor (const href of uses.dependencies) {\n\t\tif (invalidated.some((fn) => fn(new URL(href)))) return true;\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {import('types').ServerDataNode | import('types').ServerDataSkippedNode | null} node\n * @param {import('./types.js').DataNode | null} [previous]\n * @returns {import('./types.js').DataNode | null}\n */\nfunction create_data_node(node, previous) {\n\tif (node?.type === 'data') return node;\n\tif (node?.type === 'skip') return previous ?? null;\n\treturn null;\n}\n\n/**\n * @param {URL | null} old_url\n * @param {URL} new_url\n */\nfunction diff_search_params(old_url, new_url) {\n\tif (!old_url) return new Set(new_url.searchParams.keys());\n\n\tconst changed = new Set([...old_url.searchParams.keys(), ...new_url.searchParams.keys()]);\n\n\tfor (const key of changed) {\n\t\tconst old_values = old_url.searchParams.getAll(key);\n\t\tconst new_values = new_url.searchParams.getAll(key);\n\n\t\tif (\n\t\t\told_values.every((value) => new_values.includes(value)) &&\n\t\t\tnew_values.every((value) => old_values.includes(value))\n\t\t) {\n\t\t\tchanged.delete(key);\n\t\t}\n\t}\n\n\treturn changed;\n}\n\n/**\n * @param {Omit<import('./types.js').NavigationFinished['state'], 'branch'> & { error: App.Error }} opts\n * @returns {import('./types.js').NavigationFinished}\n */\nfunction preload_error({ error, url, route, params }) {\n\treturn {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\terror,\n\t\t\turl,\n\t\t\troute,\n\t\t\tparams,\n\t\t\tbranch: []\n\t\t},\n\t\tprops: {\n\t\t\tpage: clone_page(page),\n\t\t\tconstructors: []\n\t\t}\n\t};\n}\n\n/**\n * @param {import('./types.js').NavigationIntent & { preload?: {} }} intent\n * @returns {Promise<import('./types.js').NavigationResult>}\n */\nasync function load_route({ id, invalidating, url, params, route, preload }) {\n\tif (load_cache?.id === id) {\n\t\t// the preload becomes the real navigation\n\t\tpreload_tokens.delete(load_cache.token);\n\t\treturn load_cache.promise;\n\t}\n\n\tconst { errors, layouts, leaf } = route;\n\n\tconst loaders = [...layouts, leaf];\n\n\t// preload modules to avoid waterfall, but handle rejections\n\t// so they don't get reported to Sentry et al (we don't need\n\t// to act on the failures at this point)\n\terrors.forEach((loader) => loader?.().catch(() => {}));\n\tloaders.forEach((loader) => loader?.[1]().catch(() => {}));\n\n\t/** @type {import('types').ServerNodesResponse | import('types').ServerRedirectNode | null} */\n\tlet server_data = null;\n\tconst url_changed = current.url ? id !== get_page_key(current.url) : false;\n\tconst route_changed = current.route ? route.id !== current.route.id : false;\n\tconst search_params_changed = diff_search_params(current.url, url);\n\n\tlet parent_invalid = false;\n\tconst invalid_server_nodes = loaders.map((loader, i) => {\n\t\tconst previous = current.branch[i];\n\n\t\tconst invalid =\n\t\t\t!!loader?.[0] &&\n\t\t\t(previous?.loader !== loader[1] ||\n\t\t\t\thas_changed(\n\t\t\t\t\tparent_invalid,\n\t\t\t\t\troute_changed,\n\t\t\t\t\turl_changed,\n\t\t\t\t\tsearch_params_changed,\n\t\t\t\t\tprevious.server?.uses,\n\t\t\t\t\tparams\n\t\t\t\t));\n\n\t\tif (invalid) {\n\t\t\t// For the next one\n\t\t\tparent_invalid = true;\n\t\t}\n\n\t\treturn invalid;\n\t});\n\n\tif (invalid_server_nodes.some(Boolean)) {\n\t\ttry {\n\t\t\tserver_data = await load_data(url, invalid_server_nodes);\n\t\t} catch (error) {\n\t\t\tconst handled_error = await handle_error(error, { url, params, route: { id } });\n\n\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\treturn preload_error({ error: handled_error, url, params, route });\n\t\t\t}\n\n\t\t\treturn load_root_error_page({\n\t\t\t\tstatus: get_status(error),\n\t\t\t\terror: handled_error,\n\t\t\t\turl,\n\t\t\t\troute\n\t\t\t});\n\t\t}\n\n\t\tif (server_data.type === 'redirect') {\n\t\t\treturn server_data;\n\t\t}\n\t}\n\n\tconst server_data_nodes = server_data?.nodes;\n\n\tlet parent_changed = false;\n\n\tconst branch_promises = loaders.map(async (loader, i) => {\n\t\tif (!loader) return;\n\n\t\t/** @type {import('./types.js').BranchNode | undefined} */\n\t\tconst previous = current.branch[i];\n\n\t\tconst server_data_node = server_data_nodes?.[i];\n\n\t\t// re-use data from previous load if it's still valid\n\t\tconst valid =\n\t\t\t(!server_data_node || server_data_node.type === 'skip') &&\n\t\t\tloader[1] === previous?.loader &&\n\t\t\t!has_changed(\n\t\t\t\tparent_changed,\n\t\t\t\troute_changed,\n\t\t\t\turl_changed,\n\t\t\t\tsearch_params_changed,\n\t\t\t\tprevious.universal?.uses,\n\t\t\t\tparams\n\t\t\t);\n\t\tif (valid) return previous;\n\n\t\tparent_changed = true;\n\n\t\tif (server_data_node?.type === 'error') {\n\t\t\t// rethrow and catch below\n\t\t\tthrow server_data_node;\n\t\t}\n\n\t\treturn load_node({\n\t\t\tloader: loader[1],\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: async () => {\n\t\t\t\tconst data = {};\n\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\tObject.assign(data, (await branch_promises[j])?.data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tserver_data_node: create_data_node(\n\t\t\t\t// server_data_node is undefined if it wasn't reloaded from the server;\n\t\t\t\t// and if current loader uses server data, we want to reuse previous data.\n\t\t\t\tserver_data_node === undefined && loader[0] ? { type: 'skip' } : (server_data_node ?? null),\n\t\t\t\tloader[0] ? previous?.server : undefined\n\t\t\t)\n\t\t});\n\t});\n\n\t// if we don't do this, rejections will be unhandled\n\tfor (const p of branch_promises) p.catch(() => {});\n\n\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\tconst branch = [];\n\n\tfor (let i = 0; i < loaders.length; i += 1) {\n\t\tif (loaders[i]) {\n\t\t\ttry {\n\t\t\t\tbranch.push(await branch_promises[i]);\n\t\t\t} catch (err) {\n\t\t\t\tif (err instanceof Redirect) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'redirect',\n\t\t\t\t\t\tlocation: err.location\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\t\treturn preload_error({\n\t\t\t\t\t\terror: await handle_error(err, { params, url, route: { id: route.id } }),\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet status = get_status(err);\n\t\t\t\t/** @type {App.Error} */\n\t\t\t\tlet error;\n\n\t\t\t\tif (server_data_nodes?.includes(/** @type {import('types').ServerErrorNode} */ (err))) {\n\t\t\t\t\t// this is the server error rethrown above, reconstruct but don't invoke\n\t\t\t\t\t// the client error handler; it should've already been handled on the server\n\t\t\t\t\tstatus = /** @type {import('types').ServerErrorNode} */ (err).status ?? status;\n\t\t\t\t\terror = /** @type {import('types').ServerErrorNode} */ (err).error;\n\t\t\t\t} else if (err instanceof HttpError) {\n\t\t\t\t\terror = err.body;\n\t\t\t\t} else {\n\t\t\t\t\t// Referenced node could have been removed due to redeploy, check\n\t\t\t\t\tconst updated = await stores.updated.check();\n\t\t\t\t\tif (updated) {\n\t\t\t\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\t\t\t\tawait update_service_worker();\n\t\t\t\t\t\treturn await native_navigation(url);\n\t\t\t\t\t}\n\n\t\t\t\t\terror = await handle_error(err, { params, url, route: { id: route.id } });\n\t\t\t\t}\n\n\t\t\t\tconst error_load = await load_nearest_error_page(i, branch, errors);\n\t\t\t\tif (error_load) {\n\t\t\t\t\treturn get_navigation_result_from_branch({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn await server_fallback(url, { id: route.id }, error, status);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// push an empty slot so we can rewind past gaps to the\n\t\t\t// layout that corresponds with an +error.svelte page\n\t\t\tbranch.push(undefined);\n\t\t}\n\t}\n\n\treturn get_navigation_result_from_branch({\n\t\turl,\n\t\tparams,\n\t\tbranch,\n\t\tstatus: 200,\n\t\terror: null,\n\t\troute,\n\t\t// Reset `form` on navigation, but not invalidation\n\t\tform: invalidating ? undefined : null\n\t});\n}\n\n/**\n * @param {number} i Start index to backtrack from\n * @param {Array<import('./types.js').BranchNode | undefined>} branch Branch to backtrack\n * @param {Array<import('types').CSRPageNodeLoader | undefined>} errors All error pages for this branch\n * @returns {Promise<{idx: number; node: import('./types.js').BranchNode} | undefined>}\n */\nasync function load_nearest_error_page(i, branch, errors) {\n\twhile (i--) {\n\t\tif (errors[i]) {\n\t\t\tlet j = i;\n\t\t\twhile (!branch[j]) j -= 1;\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tidx: j + 1,\n\t\t\t\t\tnode: {\n\t\t\t\t\t\tnode: await /** @type {import('types').CSRPageNodeLoader } */ (errors[i])(),\n\t\t\t\t\t\tloader: /** @type {import('types').CSRPageNodeLoader } */ (errors[i]),\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\tserver: null,\n\t\t\t\t\t\tuniversal: null\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} catch {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {{\n *   status: number;\n *   error: App.Error;\n *   url: URL;\n *   route: { id: string | null }\n * }} opts\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function load_root_error_page({ status, error, url, route }) {\n\t/** @type {Record<string, string>} */\n\tconst params = {}; // error page does not have params\n\n\t/** @type {import('types').ServerDataNode | null} */\n\tlet server_data_node = null;\n\n\tconst default_layout_has_server_load = app.server_loads[0] === 0;\n\n\tif (default_layout_has_server_load) {\n\t\t// TODO post-https://github.com/sveltejs/kit/discussions/6124 we can use\n\t\t// existing root layout data\n\t\ttry {\n\t\t\tconst server_data = await load_data(url, [true]);\n\n\t\t\tif (\n\t\t\t\tserver_data.type !== 'data' ||\n\t\t\t\t(server_data.nodes[0] && server_data.nodes[0].type !== 'data')\n\t\t\t) {\n\t\t\t\tthrow 0;\n\t\t\t}\n\n\t\t\tserver_data_node = server_data.nodes[0] ?? null;\n\t\t} catch {\n\t\t\t// at this point we have no choice but to fall back to the server, if it wouldn't\n\t\t\t// bring us right back here, turning this into an endless loop\n\t\t\tif (url.origin !== origin || url.pathname !== location.pathname || hydrated) {\n\t\t\t\tawait native_navigation(url);\n\t\t\t}\n\t\t}\n\t}\n\n\ttry {\n\t\tconst root_layout = await load_node({\n\t\t\tloader: default_layout_loader,\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: () => Promise.resolve({}),\n\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t});\n\n\t\t/** @type {import('./types.js').BranchNode} */\n\t\tconst root_error = {\n\t\t\tnode: await default_error_loader(),\n\t\t\tloader: default_error_loader,\n\t\t\tuniversal: null,\n\t\t\tserver: null,\n\t\t\tdata: null\n\t\t};\n\n\t\treturn get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch: [root_layout, root_error],\n\t\t\tstatus,\n\t\t\terror,\n\t\t\troute: null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\treturn _goto(new URL(error.location, location.href), {}, 0);\n\t\t}\n\n\t\t// TODO: this falls back to the server when a server exists, but what about SPA mode?\n\t\tthrow error;\n\t}\n}\n\n/**\n * Resolve the relative rerouted URL for a client-side navigation\n * @param {URL} url\n * @returns {URL | undefined}\n */\nfunction get_rerouted_url(url) {\n\t// reroute could alter the given URL, so we pass a copy\n\tlet rerouted;\n\ttry {\n\t\trerouted = app.hooks.reroute({ url: new URL(url) }) ?? url;\n\n\t\tif (typeof rerouted === 'string') {\n\t\t\tconst tmp = new URL(url); // do not mutate the incoming URL\n\n\t\t\tif (app.hash) {\n\t\t\t\ttmp.hash = rerouted;\n\t\t\t} else {\n\t\t\t\ttmp.pathname = rerouted;\n\t\t\t}\n\n\t\t\trerouted = tmp;\n\t\t}\n\t} catch (e) {\n\t\tif (DEV) {\n\t\t\t// in development, print the error...\n\t\t\tconsole.error(e);\n\n\t\t\t// ...and pause execution, since otherwise we will immediately reload the page\n\t\t\tdebugger; // eslint-disable-line\n\t\t}\n\n\t\t// fall back to native navigation\n\t\treturn;\n\t}\n\n\treturn rerouted;\n}\n\n/**\n * Resolve the full info (which route, params, etc.) for a client-side navigation from the URL,\n * taking the reroute hook into account. If this isn't a client-side-navigation (or the URL is undefined),\n * returns undefined.\n * @param {URL | undefined} url\n * @param {boolean} invalidating\n * @returns {Promise<import('./types.js').NavigationIntent | undefined>}\n */\nasync function get_navigation_intent(url, invalidating) {\n\tif (!url) return;\n\tif (is_external_url(url, base, app.hash)) return;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tconst rerouted = get_rerouted_url(url);\n\t\tif (!rerouted) return;\n\n\t\tconst path = get_url_path(rerouted);\n\n\t\tfor (const route of routes) {\n\t\t\tconst params = route.exec(path);\n\n\t\t\tif (params) {\n\t\t\t\treturn {\n\t\t\t\t\tid: get_page_key(url),\n\t\t\t\t\tinvalidating,\n\t\t\t\t\troute,\n\t\t\t\t\tparams: decode_params(params),\n\t\t\t\t\turl\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} else {\n\t\t/** @type {{ route?: import('types').CSRRouteServer, params: Record<string, string>}} */\n\t\tconst { route, params } = await import(\n\t\t\t/* @vite-ignore */\n\t\t\tadd_resolution_suffix(url.pathname)\n\t\t);\n\n\t\tif (!route) return;\n\n\t\treturn {\n\t\t\tid: get_page_key(url),\n\t\t\tinvalidating,\n\t\t\troute: parse_server_route(route, app.nodes),\n\t\t\tparams,\n\t\t\turl\n\t\t};\n\t}\n}\n\n/** @param {URL} url */\nfunction get_url_path(url) {\n\treturn (\n\t\tdecode_pathname(\n\t\t\tapp.hash ? url.hash.replace(/^#/, '').replace(/[?#].+/, '') : url.pathname.slice(base.length)\n\t\t) || '/'\n\t);\n}\n\n/** @param {URL} url */\nfunction get_page_key(url) {\n\treturn (app.hash ? url.hash.replace(/^#/, '') : url.pathname) + url.search;\n}\n\n/**\n * @param {{\n *   url: URL;\n *   type: import('@sveltejs/kit').Navigation[\"type\"];\n *   intent?: import('./types.js').NavigationIntent;\n *   delta?: number;\n * }} opts\n */\nfunction _before_navigate({ url, type, intent, delta }) {\n\tlet should_block = false;\n\n\tconst nav = create_navigation(current, intent, url, type);\n\n\tif (delta !== undefined) {\n\t\tnav.navigation.delta = delta;\n\t}\n\n\tconst cancellable = {\n\t\t...nav.navigation,\n\t\tcancel: () => {\n\t\t\tshould_block = true;\n\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t}\n\t};\n\n\tif (!is_navigating) {\n\t\t// Don't run the event during redirects\n\t\tbefore_navigate_callbacks.forEach((fn) => fn(cancellable));\n\t}\n\n\treturn should_block ? null : nav;\n}\n\n/**\n * @param {{\n *   type: import('@sveltejs/kit').Navigation[\"type\"];\n *   url: URL;\n *   popped?: {\n *     state: Record<string, any>;\n *     scroll: { x: number, y: number };\n *     delta: number;\n *   };\n *   keepfocus?: boolean;\n *   noscroll?: boolean;\n *   replace_state?: boolean;\n *   state?: Record<string, any>;\n *   redirect_count?: number;\n *   nav_token?: {};\n *   accept?: () => void;\n *   block?: () => void;\n * }} opts\n */\nasync function navigate({\n\ttype,\n\turl,\n\tpopped,\n\tkeepfocus,\n\tnoscroll,\n\treplace_state,\n\tstate = {},\n\tredirect_count = 0,\n\tnav_token = {},\n\taccept = noop,\n\tblock = noop\n}) {\n\tconst prev_token = token;\n\ttoken = nav_token;\n\n\tconst intent = await get_navigation_intent(url, false);\n\tconst nav = _before_navigate({ url, type, delta: popped?.delta, intent });\n\n\tif (!nav) {\n\t\tblock();\n\t\tif (token === nav_token) token = prev_token;\n\t\treturn;\n\t}\n\n\t// store this before calling `accept()`, which may change the index\n\tconst previous_history_index = current_history_index;\n\tconst previous_navigation_index = current_navigation_index;\n\n\taccept();\n\n\tis_navigating = true;\n\n\tif (started) {\n\t\tstores.navigating.set((navigating.current = nav.navigation));\n\t}\n\n\tlet navigation_result = intent && (await load_route(intent));\n\n\tif (!navigation_result) {\n\t\tif (is_external_url(url, base, app.hash)) {\n\t\t\tif (DEV && app.hash) {\n\t\t\t\t// Special case for hash mode during DEV: If someone accidentally forgets to use a hash for the link,\n\t\t\t\t// they would end up here in an endless loop. Fall back to error page in that case\n\t\t\t\tnavigation_result = await server_fallback(\n\t\t\t\t\turl,\n\t\t\t\t\t{ id: null },\n\t\t\t\t\tawait handle_error(\n\t\t\t\t\t\tnew SvelteKitError(\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t'Not Found',\n\t\t\t\t\t\t\t`Not found: ${url.pathname} (did you forget the hash?)`\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\tparams: {},\n\t\t\t\t\t\t\troute: { id: null }\n\t\t\t\t\t\t}\n\t\t\t\t\t),\n\t\t\t\t\t404\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn await native_navigation(url);\n\t\t\t}\n\t\t} else {\n\t\t\tnavigation_result = await server_fallback(\n\t\t\t\turl,\n\t\t\t\t{ id: null },\n\t\t\t\tawait handle_error(new SvelteKitError(404, 'Not Found', `Not found: ${url.pathname}`), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\t404\n\t\t\t);\n\t\t}\n\t}\n\n\t// if this is an internal navigation intent, use the normalized\n\t// URL for the rest of the function\n\turl = intent?.url || url;\n\n\t// abort if user navigated during update\n\tif (token !== nav_token) {\n\t\tnav.reject(new Error('navigation aborted'));\n\t\treturn false;\n\t}\n\n\tif (navigation_result.type === 'redirect') {\n\t\t// whatwg fetch spec https://fetch.spec.whatwg.org/#http-redirect-fetch says to error after 20 redirects\n\t\tif (redirect_count >= 20) {\n\t\t\tnavigation_result = await load_root_error_page({\n\t\t\t\tstatus: 500,\n\t\t\t\terror: await handle_error(new Error('Redirect loop'), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\turl,\n\t\t\t\troute: { id: null }\n\t\t\t});\n\t\t} else {\n\t\t\tawait _goto(new URL(navigation_result.location, url).href, {}, redirect_count + 1, nav_token);\n\t\t\treturn false;\n\t\t}\n\t} else if (/** @type {number} */ (navigation_result.props.page.status) >= 400) {\n\t\tconst updated = await stores.updated.check();\n\t\tif (updated) {\n\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\tawait update_service_worker();\n\t\t\tawait native_navigation(url);\n\t\t}\n\t}\n\n\t// reset invalidation only after a finished navigation. If there are redirects or\n\t// additional invalidations, they should get the same invalidation treatment\n\treset_invalidation();\n\n\tupdating = true;\n\n\tupdate_scroll_positions(previous_history_index);\n\tcapture_snapshot(previous_navigation_index);\n\n\t// ensure the url pathname matches the page's trailing slash option\n\tif (navigation_result.props.page.url.pathname !== url.pathname) {\n\t\turl.pathname = navigation_result.props.page.url.pathname;\n\t}\n\n\tstate = popped ? popped.state : state;\n\n\tif (!popped) {\n\t\t// this is a new navigation, rather than a popstate\n\t\tconst change = replace_state ? 0 : 1;\n\n\t\tconst entry = {\n\t\t\t[HISTORY_INDEX]: (current_history_index += change),\n\t\t\t[NAVIGATION_INDEX]: (current_navigation_index += change),\n\t\t\t[STATES_KEY]: state\n\t\t};\n\n\t\tconst fn = replace_state ? history.replaceState : history.pushState;\n\t\tfn.call(history, entry, '', url);\n\n\t\tif (!replace_state) {\n\t\t\tclear_onward_history(current_history_index, current_navigation_index);\n\t\t}\n\t}\n\n\t// reset preload synchronously after the history state has been set to avoid race conditions\n\tload_cache = null;\n\n\tnavigation_result.props.page.state = state;\n\n\tif (started) {\n\t\tcurrent = navigation_result.state;\n\n\t\t// reset url before updating page store\n\t\tif (navigation_result.props.page) {\n\t\t\tnavigation_result.props.page.url = url;\n\t\t}\n\n\t\tconst after_navigate = (\n\t\t\tawait Promise.all(\n\t\t\t\tArray.from(on_navigate_callbacks, (fn) =>\n\t\t\t\t\tfn(/** @type {import('@sveltejs/kit').OnNavigate} */ (nav.navigation))\n\t\t\t\t)\n\t\t\t)\n\t\t).filter(/** @returns {value is () => void} */ (value) => typeof value === 'function');\n\n\t\tif (after_navigate.length > 0) {\n\t\t\tfunction cleanup() {\n\t\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\t\tafter_navigate_callbacks.delete(fn);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tafter_navigate.push(cleanup);\n\n\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\tafter_navigate_callbacks.add(fn);\n\t\t\t});\n\t\t}\n\n\t\troot.$set(navigation_result.props);\n\t\tupdate(navigation_result.props.page);\n\t\thas_navigated = true;\n\t} else {\n\t\tinitialize(navigation_result, target, false);\n\t}\n\n\tconst { activeElement } = document;\n\n\t// need to render the DOM before we can scroll to the rendered elements and do focus management\n\tawait tick();\n\n\t// we reset scroll before dealing with focus, to avoid a flash of unscrolled content\n\tconst scroll = popped ? popped.scroll : noscroll ? scroll_state() : null;\n\n\tif (autoscroll) {\n\t\tconst deep_linked =\n\t\t\turl.hash &&\n\t\t\tdocument.getElementById(\n\t\t\t\tdecodeURIComponent(app.hash ? (url.hash.split('#')[2] ?? '') : url.hash.slice(1))\n\t\t\t);\n\t\tif (scroll) {\n\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t} else if (deep_linked) {\n\t\t\t// Here we use `scrollIntoView` on the element instead of `scrollTo`\n\t\t\t// because it natively supports the `scroll-margin` and `scroll-behavior`\n\t\t\t// CSS properties.\n\t\t\tdeep_linked.scrollIntoView();\n\t\t} else {\n\t\t\tscrollTo(0, 0);\n\t\t}\n\t}\n\n\tconst changed_focus =\n\t\t// reset focus only if any manual focus management didn't override it\n\t\tdocument.activeElement !== activeElement &&\n\t\t// also refocus when activeElement is body already because the\n\t\t// focus event might not have been fired on it yet\n\t\tdocument.activeElement !== document.body;\n\n\tif (!keepfocus && !changed_focus) {\n\t\treset_focus();\n\t}\n\n\tautoscroll = true;\n\n\tif (navigation_result.props.page) {\n\t\tObject.assign(page, navigation_result.props.page);\n\t}\n\n\tis_navigating = false;\n\n\tif (type === 'popstate') {\n\t\trestore_snapshot(current_navigation_index);\n\t}\n\n\tnav.fulfil(undefined);\n\n\tafter_navigate_callbacks.forEach((fn) =>\n\t\tfn(/** @type {import('@sveltejs/kit').AfterNavigate} */ (nav.navigation))\n\t);\n\n\tstores.navigating.set((navigating.current = null));\n\n\tupdating = false;\n}\n\n/**\n * Does a full page reload if it wouldn't result in an endless loop in the SPA case\n * @param {URL} url\n * @param {{ id: string | null }} route\n * @param {App.Error} error\n * @param {number} status\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function server_fallback(url, route, error, status) {\n\tif (url.origin === origin && url.pathname === location.pathname && !hydrated) {\n\t\t// We would reload the same page we're currently on, which isn't hydrated,\n\t\t// which means no SSR, which means we would end up in an endless loop\n\t\treturn await load_root_error_page({\n\t\t\tstatus,\n\t\t\terror,\n\t\t\turl,\n\t\t\troute\n\t\t});\n\t}\n\n\tif (DEV && status !== 404) {\n\t\tconsole.error(\n\t\t\t'An error occurred while loading the page. This will cause a full page reload. (This message will only appear during development.)'\n\t\t);\n\n\t\tdebugger; // eslint-disable-line\n\t}\n\n\treturn await native_navigation(url);\n}\n\nif (import.meta.hot) {\n\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\tif (current.error) location.reload();\n\t});\n}\n\nfunction setup_preload() {\n\t/** @type {NodeJS.Timeout} */\n\tlet mousemove_timeout;\n\t/** @type {Element} */\n\tlet current_a;\n\n\tcontainer.addEventListener('mousemove', (event) => {\n\t\tconst target = /** @type {Element} */ (event.target);\n\n\t\tclearTimeout(mousemove_timeout);\n\t\tmousemove_timeout = setTimeout(() => {\n\t\t\tvoid preload(target, 2);\n\t\t}, 20);\n\t});\n\n\t/** @param {Event} event */\n\tfunction tap(event) {\n\t\tif (event.defaultPrevented) return;\n\t\tvoid preload(/** @type {Element} */ (event.composedPath()[0]), 1);\n\t}\n\n\tcontainer.addEventListener('mousedown', tap);\n\tcontainer.addEventListener('touchstart', tap, { passive: true });\n\n\tconst observer = new IntersectionObserver(\n\t\t(entries) => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\tvoid _preload_code(new URL(/** @type {HTMLAnchorElement} */ (entry.target).href));\n\t\t\t\t\tobserver.unobserve(entry.target);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{ threshold: 0 }\n\t);\n\n\t/**\n\t * @param {Element} element\n\t * @param {number} priority\n\t */\n\tasync function preload(element, priority) {\n\t\tconst a = find_anchor(element, container);\n\t\tif (!a || a === current_a) return;\n\n\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\tif (external || download) return;\n\n\t\tconst options = get_router_options(a);\n\n\t\t// we don't want to preload data for a page we're already on\n\t\tconst same_url = url && get_page_key(current.url) === get_page_key(url);\n\n\t\tif (!options.reload && !same_url) {\n\t\t\tif (priority <= options.preload_data) {\n\t\t\t\tcurrent_a = a;\n\t\t\t\tconst intent = await get_navigation_intent(url, false);\n\t\t\t\tif (intent) {\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\tvoid _preload_data(intent).then((result) => {\n\t\t\t\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t\t`Preloading data for ${intent.url.pathname} failed with the following error: ${result.state.error.message}\\n` +\n\t\t\t\t\t\t\t\t\t\t'If this error is transient, you can ignore it. Otherwise, consider disabling preloading for this route. ' +\n\t\t\t\t\t\t\t\t\t\t'This route was preloaded due to a data-sveltekit-preload-data attribute. ' +\n\t\t\t\t\t\t\t\t\t\t'See https://svelte.dev/docs/kit/link-options for more info'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvoid _preload_data(intent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (priority <= options.preload_code) {\n\t\t\t\tcurrent_a = a;\n\t\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction after_navigate() {\n\t\tobserver.disconnect();\n\n\t\tfor (const a of container.querySelectorAll('a')) {\n\t\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\t\tif (external || download) continue;\n\n\t\t\tconst options = get_router_options(a);\n\t\t\tif (options.reload) continue;\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.viewport) {\n\t\t\t\tobserver.observe(a);\n\t\t\t}\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.eager) {\n\t\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t\t}\n\t\t}\n\t}\n\n\tafter_navigate_callbacks.add(after_navigate);\n\tafter_navigate();\n}\n\n/**\n * @param {unknown} error\n * @param {import('@sveltejs/kit').NavigationEvent} event\n * @returns {import('types').MaybePromise<App.Error>}\n */\nfunction handle_error(error, event) {\n\tif (error instanceof HttpError) {\n\t\treturn error.body;\n\t}\n\n\tif (DEV) {\n\t\terrored = true;\n\t\tconsole.warn('The next HMR update will cause the page to reload');\n\t}\n\n\tconst status = get_status(error);\n\tconst message = get_message(error);\n\n\treturn (\n\t\tapp.hooks.handleError({ error, event, status, message }) ?? /** @type {any} */ ({ message })\n\t);\n}\n\n/**\n * @template {Function} T\n * @param {Set<T>} callbacks\n * @param {T} callback\n */\nfunction add_navigation_callback(callbacks, callback) {\n\tonMount(() => {\n\t\tcallbacks.add(callback);\n\n\t\treturn () => {\n\t\t\tcallbacks.delete(callback);\n\t\t};\n\t});\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` when the current component mounts, and also whenever we navigate to a URL.\n *\n * `afterNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').AfterNavigate) => void} callback\n * @returns {void}\n */\nexport function afterNavigate(callback) {\n\tadd_navigation_callback(after_navigate_callbacks, callback);\n}\n\n/**\n * A navigation interceptor that triggers before we navigate to a URL, whether by clicking a link, calling `goto(...)`, or using the browser back/forward controls.\n *\n * Calling `cancel()` will prevent the navigation from completing. If `navigation.type === 'leave'` — meaning the user is navigating away from the app (or closing the tab) — calling `cancel` will trigger the native browser unload confirmation dialog. In this case, the navigation may or may not be cancelled depending on the user's response.\n *\n * When a navigation isn't to a SvelteKit-owned route (and therefore controlled by SvelteKit's client-side router), `navigation.to.route.id` will be `null`.\n *\n * If the navigation will (if not cancelled) cause the document to unload — in other words `'leave'` navigations and `'link'` navigations where `navigation.to.route === null` — `navigation.willUnload` is `true`.\n *\n * `beforeNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').BeforeNavigate) => void} callback\n * @returns {void}\n */\nexport function beforeNavigate(callback) {\n\tadd_navigation_callback(before_navigate_callbacks, callback);\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` immediately before we navigate to a new URL except during full-page navigations.\n *\n * If you return a `Promise`, SvelteKit will wait for it to resolve before completing the navigation. This allows you to — for example — use `document.startViewTransition`. Avoid promises that are slow to resolve, since navigation will appear stalled to the user.\n *\n * If a function (or a `Promise` that resolves to a function) is returned from the callback, it will be called once the DOM has updated.\n *\n * `onNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>} callback\n * @returns {void}\n */\nexport function onNavigate(callback) {\n\tadd_navigation_callback(on_navigate_callbacks, callback);\n}\n\n/**\n * If called when the page is being updated following a navigation (in `onMount` or `afterNavigate` or an action, for example), this disables SvelteKit's built-in scroll handling.\n * This is generally discouraged, since it breaks user expectations.\n * @returns {void}\n */\nexport function disableScrollHandling() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call disableScrollHandling() on the server');\n\t}\n\n\tif (DEV && started && !updating) {\n\t\tthrow new Error('Can only disable scroll handling during navigation');\n\t}\n\n\tif (updating || !started) {\n\t\tautoscroll = false;\n\t}\n}\n\n/**\n * Allows you to navigate programmatically to a given route, with options such as keeping the current element focused.\n * Returns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified `url`.\n *\n * For external URLs, use `window.location = url` instead of calling `goto(url)`.\n *\n * @param {string | URL} url Where to navigate to. Note that if you've set [`config.kit.paths.base`](https://svelte.dev/docs/kit/configuration#paths) and the URL is root-relative, you need to prepend the base path if you want to navigate within the app.\n * @param {Object} [opts] Options related to the navigation\n * @param {boolean} [opts.replaceState] If `true`, will replace the current `history` entry rather than creating a new one with `pushState`\n * @param {boolean} [opts.noScroll] If `true`, the browser will maintain its scroll position rather than scrolling to the top of the page after navigation\n * @param {boolean} [opts.keepFocus] If `true`, the currently focused element will retain focus after navigation. Otherwise, focus will be reset to the body\n * @param {boolean} [opts.invalidateAll] If `true`, all `load` functions of the page will be rerun. See https://svelte.dev/docs/kit/load#rerunning-load-functions for more info on invalidation.\n * @param {Array<string | URL | ((url: URL) => boolean)>} [opts.invalidate] Causes any load functions to re-run if they depend on one of the urls\n * @param {App.PageState} [opts.state] An optional object that will be available as `page.state`\n * @returns {Promise<void>}\n */\nexport function goto(url, opts = {}) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call goto(...) on the server');\n\t}\n\n\turl = new URL(resolve_url(url));\n\n\tif (url.origin !== origin) {\n\t\treturn Promise.reject(\n\t\t\tnew Error(\n\t\t\t\tDEV\n\t\t\t\t\t? `Cannot use \\`goto\\` with an external URL. Use \\`window.location = \"${url}\"\\` instead`\n\t\t\t\t\t: 'goto: invalid URL'\n\t\t\t)\n\t\t);\n\t}\n\n\treturn _goto(url, opts, 0);\n}\n\n/**\n * Causes any `load` functions belonging to the currently active page to re-run if they depend on the `url` in question, via `fetch` or `depends`. Returns a `Promise` that resolves when the page is subsequently updated.\n *\n * If the argument is given as a `string` or `URL`, it must resolve to the same URL that was passed to `fetch` or `depends` (including query parameters).\n * To create a custom identifier, use a string beginning with `[a-z]+:` (e.g. `custom:state`) — this is a valid URL.\n *\n * The `function` argument can be used define a custom predicate. It receives the full `URL` and causes `load` to rerun if `true` is returned.\n * This can be useful if you want to invalidate based on a pattern instead of a exact match.\n *\n * ```ts\n * // Example: Match '/path' regardless of the query parameters\n * import { invalidate } from '$app/navigation';\n *\n * invalidate((url) => url.pathname === '/path');\n * ```\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n * @returns {Promise<void>}\n */\nexport function invalidate(resource) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidate(...) on the server');\n\t}\n\n\tpush_invalidated(resource);\n\n\treturn _invalidate();\n}\n\n/**\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n */\nfunction push_invalidated(resource) {\n\tif (typeof resource === 'function') {\n\t\tinvalidated.push(resource);\n\t} else {\n\t\tconst { href } = new URL(resource, location.href);\n\t\tinvalidated.push((url) => url.href === href);\n\t}\n}\n\n/**\n * Causes all `load` functions belonging to the currently active page to re-run. Returns a `Promise` that resolves when the page is subsequently updated.\n * @returns {Promise<void>}\n */\nexport function invalidateAll() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidateAll() on the server');\n\t}\n\n\tforce_invalidation = true;\n\treturn _invalidate();\n}\n\n/**\n * Programmatically preloads the given page, which means\n *  1. ensuring that the code for the page is loaded, and\n *  2. calling the page's load function with the appropriate options.\n *\n * This is the same behaviour that SvelteKit triggers when the user taps or mouses over an `<a>` element with `data-sveltekit-preload-data`.\n * If the next navigation is to `href`, the values returned from load will be used, making navigation instantaneous.\n * Returns a Promise that resolves with the result of running the new route's `load` functions once the preload is complete.\n *\n * @param {string} href Page to preload\n * @returns {Promise<{ type: 'loaded'; status: number; data: Record<string, any> } | { type: 'redirect'; location: string }>}\n */\nexport async function preloadData(href) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadData(...) on the server');\n\t}\n\n\tconst url = resolve_url(href);\n\tconst intent = await get_navigation_intent(url, false);\n\n\tif (!intent) {\n\t\tthrow new Error(`Attempted to preload a URL that does not belong to this app: ${url}`);\n\t}\n\n\tconst result = await _preload_data(intent);\n\tif (result.type === 'redirect') {\n\t\treturn {\n\t\t\ttype: result.type,\n\t\t\tlocation: result.location\n\t\t};\n\t}\n\n\tconst { status, data } = result.props.page ?? page;\n\treturn { type: result.type, status, data };\n}\n\n/**\n * Programmatically imports the code for routes that haven't yet been fetched.\n * Typically, you might call this to speed up subsequent navigation.\n *\n * You can specify routes by any matching pathname such as `/about` (to match `src/routes/about/+page.svelte`) or `/blog/*` (to match `src/routes/blog/[slug]/+page.svelte`).\n *\n * Unlike `preloadData`, this won't call `load` functions.\n * Returns a Promise that resolves when the modules have been imported.\n *\n * @param {string} pathname\n * @returns {Promise<void>}\n */\nexport async function preloadCode(pathname) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadCode(...) on the server');\n\t}\n\n\tconst url = new URL(pathname, current.url);\n\n\tif (DEV) {\n\t\tif (!pathname.startsWith('/')) {\n\t\t\tthrow new Error(\n\t\t\t\t'argument passed to preloadCode must be a pathname (i.e. \"/about\" rather than \"http://example.com/about\"'\n\t\t\t);\n\t\t}\n\n\t\tif (!pathname.startsWith(base)) {\n\t\t\tthrow new Error(\n\t\t\t\t`pathname passed to preloadCode must start with \\`paths.base\\` (i.e. \"${base}${pathname}\" rather than \"${pathname}\")`\n\t\t\t);\n\t\t}\n\n\t\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\t\tconst rerouted = get_rerouted_url(url);\n\t\t\tif (!rerouted || !routes.find((route) => route.exec(get_url_path(rerouted)))) {\n\t\t\t\tthrow new Error(`'${pathname}' did not match any routes`);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _preload_code(url);\n}\n\n/**\n * Programmatically create a new history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function pushState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call pushState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call pushState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tupdate_scroll_positions(current_history_index);\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: (current_history_index += 1),\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.pushState(opts, '', resolve_url(url));\n\thas_navigated = true;\n\n\tpage.state = state;\n\troot.$set({\n\t\t// we need to assign a new page object so that subscribers are correctly notified\n\t\tpage: clone_page(page)\n\t});\n\n\tclear_onward_history(current_history_index, current_navigation_index);\n}\n\n/**\n * Programmatically replace the current history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function replaceState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call replaceState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call replaceState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: current_history_index,\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.replaceState(opts, '', resolve_url(url));\n\n\tpage.state = state;\n\troot.$set({\n\t\tpage: clone_page(page)\n\t});\n}\n\n/**\n * This action updates the `form` property of the current page with the given data and updates `page.status`.\n * In case of an error, it redirects to the nearest error page.\n * @template {Record<string, unknown> | undefined} Success\n * @template {Record<string, unknown> | undefined} Failure\n * @param {import('@sveltejs/kit').ActionResult<Success, Failure>} result\n * @returns {Promise<void>}\n */\nexport async function applyAction(result) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call applyAction(...) on the server');\n\t}\n\n\tif (result.type === 'error') {\n\t\tconst url = new URL(location.href);\n\n\t\tconst { branch, route } = current;\n\t\tif (!route) return;\n\n\t\tconst error_load = await load_nearest_error_page(current.branch.length, branch, route.errors);\n\t\tif (error_load) {\n\t\t\tconst navigation_result = get_navigation_result_from_branch({\n\t\t\t\turl,\n\t\t\t\tparams: current.params,\n\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\tstatus: result.status ?? 500,\n\t\t\t\terror: result.error,\n\t\t\t\troute\n\t\t\t});\n\n\t\t\tcurrent = navigation_result.state;\n\n\t\t\troot.$set(navigation_result.props);\n\t\t\tupdate(navigation_result.props.page);\n\n\t\t\tvoid tick().then(reset_focus);\n\t\t}\n\t} else if (result.type === 'redirect') {\n\t\tawait _goto(result.location, { invalidateAll: true }, 0);\n\t} else {\n\t\tpage.form = result.data;\n\t\tpage.status = result.status;\n\n\t\t/** @type {Record<string, any>} */\n\t\troot.$set({\n\t\t\t// this brings Svelte's view of the world in line with SvelteKit's\n\t\t\t// after use:enhance reset the form....\n\t\t\tform: null,\n\t\t\tpage: clone_page(page)\n\t\t});\n\n\t\t// ...so that setting the `form` prop takes effect and isn't ignored\n\t\tawait tick();\n\t\troot.$set({ form: result.data });\n\n\t\tif (result.type === 'success') {\n\t\t\treset_focus();\n\t\t}\n\t}\n}\n\nfunction _start_router() {\n\thistory.scrollRestoration = 'manual';\n\n\t// Adopted from Nuxt.js\n\t// Reset scrollRestoration to auto when leaving page, allowing page reload\n\t// and back-navigation from other pages to use the browser to restore the\n\t// scrolling position.\n\taddEventListener('beforeunload', (e) => {\n\t\tlet should_block = false;\n\n\t\tpersist_state();\n\n\t\tif (!is_navigating) {\n\t\t\tconst nav = create_navigation(current, undefined, null, 'leave');\n\n\t\t\t// If we're navigating, beforeNavigate was already called. If we end up in here during navigation,\n\t\t\t// it's due to an external or full-page-reload link, for which we don't want to call the hook again.\n\t\t\t/** @type {import('@sveltejs/kit').BeforeNavigate} */\n\t\t\tconst navigation = {\n\t\t\t\t...nav.navigation,\n\t\t\t\tcancel: () => {\n\t\t\t\t\tshould_block = true;\n\t\t\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tbefore_navigate_callbacks.forEach((fn) => fn(navigation));\n\t\t}\n\n\t\tif (should_block) {\n\t\t\te.preventDefault();\n\t\t\te.returnValue = '';\n\t\t} else {\n\t\t\thistory.scrollRestoration = 'auto';\n\t\t}\n\t});\n\n\taddEventListener('visibilitychange', () => {\n\t\tif (document.visibilityState === 'hidden') {\n\t\t\tpersist_state();\n\t\t}\n\t});\n\n\t// @ts-expect-error this isn't supported everywhere yet\n\tif (!navigator.connection?.saveData) {\n\t\tsetup_preload();\n\t}\n\n\t/** @param {MouseEvent} event */\n\tcontainer.addEventListener('click', async (event) => {\n\t\t// Adapted from https://github.com/visionmedia/page.js\n\t\t// MIT license https://github.com/visionmedia/page.js#license\n\t\tif (event.button || event.which !== 1) return;\n\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst a = find_anchor(/** @type {Element} */ (event.composedPath()[0]), container);\n\t\tif (!a) return;\n\n\t\tconst { url, external, target, download } = get_link_info(a, base, app.hash);\n\t\tif (!url) return;\n\n\t\t// bail out before `beforeNavigate` if link opens in a different tab\n\t\tif (target === '_parent' || target === '_top') {\n\t\t\tif (window.parent !== window) return;\n\t\t} else if (target && target !== '_self') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options = get_router_options(a);\n\t\tconst is_svg_a_element = a instanceof SVGAElement;\n\n\t\t// Ignore URL protocols that differ to the current one and are not http(s) (e.g. `mailto:`, `tel:`, `myapp:`, etc.)\n\t\t// This may be wrong when the protocol is x: and the link goes to y:.. which should be treated as an external\n\t\t// navigation, but it's not clear how to handle that case and it's not likely to come up in practice.\n\t\t// MEMO: Without this condition, firefox will open mailer twice.\n\t\t// See:\n\t\t// - https://github.com/sveltejs/kit/issues/4045\n\t\t// - https://github.com/sveltejs/kit/issues/5725\n\t\t// - https://github.com/sveltejs/kit/issues/6496\n\t\tif (\n\t\t\t!is_svg_a_element &&\n\t\t\turl.protocol !== location.protocol &&\n\t\t\t!(url.protocol === 'https:' || url.protocol === 'http:')\n\t\t)\n\t\t\treturn;\n\n\t\tif (download) return;\n\n\t\tconst [nonhash, hash] = (app.hash ? url.hash.replace(/^#/, '') : url.href).split('#');\n\t\tconst same_pathname = nonhash === strip_hash(location);\n\n\t\t// Ignore the following but fire beforeNavigate\n\t\tif (external || (options.reload && (!same_pathname || !hash))) {\n\t\t\tif (_before_navigate({ url, type: 'link' })) {\n\t\t\t\t// set `navigating` to `true` to prevent `beforeNavigate` callbacks\n\t\t\t\t// being called when the page unloads\n\t\t\t\tis_navigating = true;\n\t\t\t} else {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if new url only differs by hash and use the browser default behavior in that case\n\t\t// This will ensure the `hashchange` event is fired\n\t\t// Removing the hash does a full page navigation in the browser, so make sure a hash is present\n\t\tif (hash !== undefined && same_pathname) {\n\t\t\t// If we are trying to navigate to the same hash, we should only\n\t\t\t// attempt to scroll to that element and avoid any history changes.\n\t\t\t// Otherwise, this can cause Firefox to incorrectly assign a null\n\t\t\t// history state value without any signal that we can detect.\n\t\t\tconst [, current_hash] = current.url.href.split('#');\n\t\t\tif (current_hash === hash) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t// We're already on /# and click on a link that goes to /#, or we're on\n\t\t\t\t// /#top and click on a link that goes to /#top. In those cases just go to\n\t\t\t\t// the top of the page, and avoid a history change.\n\t\t\t\tif (hash === '' || (hash === 'top' && a.ownerDocument.getElementById('top') === null)) {\n\t\t\t\t\twindow.scrollTo({ top: 0 });\n\t\t\t\t} else {\n\t\t\t\t\tconst element = a.ownerDocument.getElementById(decodeURIComponent(hash));\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\telement.scrollIntoView();\n\t\t\t\t\t\telement.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// set this flag to distinguish between navigations triggered by\n\t\t\t// clicking a hash link and those triggered by popstate\n\t\t\thash_navigating = true;\n\n\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\tupdate_url(url);\n\n\t\t\tif (!options.replace_state) return;\n\n\t\t\t// hashchange event shouldn't occur if the router is replacing state.\n\t\t\thash_navigating = false;\n\t\t}\n\n\t\tevent.preventDefault();\n\n\t\t// allow the browser to repaint before navigating —\n\t\t// this prevents INP scores being penalised\n\t\tawait new Promise((fulfil) => {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tsetTimeout(fulfil, 0);\n\t\t\t});\n\n\t\t\tsetTimeout(fulfil, 100); // fallback for edge case where rAF doesn't fire because e.g. tab was backgrounded\n\t\t});\n\n\t\tawait navigate({\n\t\t\ttype: 'link',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t});\n\t});\n\n\tcontainer.addEventListener('submit', (event) => {\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst form = /** @type {HTMLFormElement} */ (\n\t\t\tHTMLFormElement.prototype.cloneNode.call(event.target)\n\t\t);\n\n\t\tconst submitter = /** @type {HTMLButtonElement | HTMLInputElement | null} */ (event.submitter);\n\n\t\tconst target = submitter?.formTarget || form.target;\n\n\t\tif (target === '_blank') return;\n\n\t\tconst method = submitter?.formMethod || form.method;\n\n\t\tif (method !== 'get') return;\n\n\t\t// It is impossible to use form actions with hash router, so we just ignore handling them here\n\t\tconst url = new URL(\n\t\t\t(submitter?.hasAttribute('formaction') && submitter?.formAction) || form.action\n\t\t);\n\n\t\tif (is_external_url(url, base, false)) return;\n\n\t\tconst event_form = /** @type {HTMLFormElement} */ (event.target);\n\n\t\tconst options = get_router_options(event_form);\n\t\tif (options.reload) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tconst data = new FormData(event_form);\n\n\t\tconst submitter_name = submitter?.getAttribute('name');\n\t\tif (submitter_name) {\n\t\t\tdata.append(submitter_name, submitter?.getAttribute('value') ?? '');\n\t\t}\n\n\t\t// @ts-expect-error `URLSearchParams(fd)` is kosher, but typescript doesn't know that\n\t\turl.search = new URLSearchParams(data).toString();\n\n\t\tvoid navigate({\n\t\t\ttype: 'form',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t});\n\t});\n\n\taddEventListener('popstate', async (event) => {\n\t\tif (event.state?.[HISTORY_INDEX]) {\n\t\t\tconst history_index = event.state[HISTORY_INDEX];\n\t\t\ttoken = {};\n\n\t\t\t// if a popstate-driven navigation is cancelled, we need to counteract it\n\t\t\t// with history.go, which means we end up back here, hence this check\n\t\t\tif (history_index === current_history_index) return;\n\n\t\t\tconst scroll = scroll_positions[history_index];\n\t\t\tconst state = event.state[STATES_KEY] ?? {};\n\t\t\tconst url = new URL(event.state[PAGE_URL_KEY] ?? location.href);\n\t\t\tconst navigation_index = event.state[NAVIGATION_INDEX];\n\t\t\tconst is_hash_change = current.url ? strip_hash(location) === strip_hash(current.url) : false;\n\t\t\tconst shallow =\n\t\t\t\tnavigation_index === current_navigation_index && (has_navigated || is_hash_change);\n\n\t\t\tif (shallow) {\n\t\t\t\t// We don't need to navigate, we just need to update scroll and/or state.\n\t\t\t\t// This happens with hash links and `pushState`/`replaceState`. The\n\t\t\t\t// exception is if we haven't navigated yet, since we could have\n\t\t\t\t// got here after a modal navigation then a reload\n\t\t\t\tif (state !== page.state) {\n\t\t\t\t\tpage.state = state;\n\t\t\t\t}\n\n\t\t\t\tupdate_url(url);\n\n\t\t\t\tscroll_positions[current_history_index] = scroll_state();\n\t\t\t\tif (scroll) scrollTo(scroll.x, scroll.y);\n\n\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst delta = history_index - current_history_index;\n\n\t\t\tawait navigate({\n\t\t\t\ttype: 'popstate',\n\t\t\t\turl,\n\t\t\t\tpopped: {\n\t\t\t\t\tstate,\n\t\t\t\t\tscroll,\n\t\t\t\t\tdelta\n\t\t\t\t},\n\t\t\t\taccept: () => {\n\t\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\t\tcurrent_navigation_index = navigation_index;\n\t\t\t\t},\n\t\t\t\tblock: () => {\n\t\t\t\t\thistory.go(-delta);\n\t\t\t\t},\n\t\t\t\tnav_token: token\n\t\t\t});\n\t\t} else {\n\t\t\t// since popstate event is also emitted when an anchor referencing the same\n\t\t\t// document is clicked, we have to check that the router isn't already handling\n\t\t\t// the navigation. otherwise we would be updating the page store twice.\n\t\t\tif (!hash_navigating) {\n\t\t\t\tconst url = new URL(location.href);\n\t\t\t\tupdate_url(url);\n\t\t\t}\n\t\t}\n\t});\n\n\taddEventListener('hashchange', () => {\n\t\t// if the hashchange happened as a result of clicking on a link,\n\t\t// we need to update history, otherwise we have to leave it alone\n\t\tif (hash_navigating) {\n\t\t\thash_navigating = false;\n\t\t\thistory.replaceState(\n\t\t\t\t{\n\t\t\t\t\t...history.state,\n\t\t\t\t\t[HISTORY_INDEX]: ++current_history_index,\n\t\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t\t},\n\t\t\t\t'',\n\t\t\t\tlocation.href\n\t\t\t);\n\t\t} else if (app.hash) {\n\t\t\t// If the user edits the hash via the browser URL bar, it\n\t\t\t// (surprisingly!) mutates `current.url`, allowing us to\n\t\t\t// detect it and trigger a navigation\n\t\t\tif (current.url.hash === location.hash) {\n\t\t\t\tvoid navigate({ type: 'goto', url: decode_hash(current.url) });\n\t\t\t}\n\t\t}\n\t});\n\n\t// fix link[rel=icon], because browsers will occasionally try to load relative\n\t// URLs after a pushState/replaceState, resulting in a 404 — see\n\t// https://github.com/sveltejs/kit/issues/3748#issuecomment-1125980897\n\tfor (const link of document.querySelectorAll('link')) {\n\t\tif (ICON_REL_ATTRIBUTES.has(link.rel)) {\n\t\t\tlink.href = link.href; // eslint-disable-line\n\t\t}\n\t}\n\n\taddEventListener('pageshow', (event) => {\n\t\t// If the user navigates to another site and then uses the back button and\n\t\t// bfcache hits, we need to set navigating to null, the site doesn't know\n\t\t// the navigation away from it was successful.\n\t\t// Info about bfcache here: https://web.dev/bfcache\n\t\tif (event.persisted) {\n\t\t\tstores.navigating.set((navigating.current = null));\n\t\t}\n\t});\n\n\t/**\n\t * @param {URL} url\n\t */\n\tfunction update_url(url) {\n\t\tcurrent.url = page.url = url;\n\t\tstores.page.set(clone_page(page));\n\t\tstores.page.notify();\n\t}\n}\n\n/**\n * @param {HTMLElement} target\n * @param {import('./types.js').HydrateOptions} opts\n */\nasync function _hydrate(\n\ttarget,\n\t{ status = 200, error, node_ids, params, route, server_route, data: server_data_nodes, form }\n) {\n\thydrated = true;\n\n\tconst url = new URL(location.href);\n\n\t/** @type {import('types').CSRRoute | undefined} */\n\tlet parsed_route;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tif (!__SVELTEKIT_EMBEDDED__) {\n\t\t\t// See https://github.com/sveltejs/kit/pull/4935#issuecomment-1328093358 for one motivation\n\t\t\t// of determining the params on the client side.\n\t\t\t({ params = {}, route = { id: null } } = (await get_navigation_intent(url, false)) || {});\n\t\t}\n\n\t\tparsed_route = routes.find(({ id }) => id === route.id);\n\t} else {\n\t\t// undefined in case of 404\n\t\tif (server_route) {\n\t\t\tparsed_route = route = parse_server_route(server_route, app.nodes);\n\t\t} else {\n\t\t\troute = { id: null };\n\t\t\tparams = {};\n\t\t}\n\t}\n\n\t/** @type {import('./types.js').NavigationFinished | undefined} */\n\tlet result;\n\tlet hydrate = true;\n\n\ttry {\n\t\tconst branch_promises = node_ids.map(async (n, i) => {\n\t\t\tconst server_data_node = server_data_nodes[i];\n\t\t\t// Type isn't completely accurate, we still need to deserialize uses\n\t\t\tif (server_data_node?.uses) {\n\t\t\t\tserver_data_node.uses = deserialize_uses(server_data_node.uses);\n\t\t\t}\n\n\t\t\treturn load_node({\n\t\t\t\tloader: app.nodes[n],\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\troute,\n\t\t\t\tparent: async () => {\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\tObject.assign(data, (await branch_promises[j]).data);\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t},\n\t\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t\t});\n\t\t});\n\n\t\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\t\tconst branch = await Promise.all(branch_promises);\n\n\t\t// server-side will have compacted the branch, reinstate empty slots\n\t\t// so that error boundaries can be lined up correctly\n\t\tif (parsed_route) {\n\t\t\tconst layouts = parsed_route.layouts;\n\t\t\tfor (let i = 0; i < layouts.length; i++) {\n\t\t\t\tif (!layouts[i]) {\n\t\t\t\t\tbranch.splice(i, 0, undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tresult = get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\tstatus,\n\t\t\terror,\n\t\t\tform,\n\t\t\troute: parsed_route ?? null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\t// this is a real edge case — `load` would need to return\n\t\t\t// a redirect but only in the browser\n\t\t\tawait native_navigation(new URL(error.location, location.href));\n\t\t\treturn;\n\t\t}\n\n\t\tresult = await load_root_error_page({\n\t\t\tstatus: get_status(error),\n\t\t\terror: await handle_error(error, { url, params, route }),\n\t\t\turl,\n\t\t\troute\n\t\t});\n\n\t\ttarget.textContent = '';\n\t\thydrate = false;\n\t}\n\n\tif (result.props.page) {\n\t\tresult.props.page.state = {};\n\t}\n\n\tinitialize(result, target, hydrate);\n}\n\n/**\n * @param {URL} url\n * @param {boolean[]} invalid\n * @returns {Promise<import('types').ServerNodesResponse | import('types').ServerRedirectNode>}\n */\nasync function load_data(url, invalid) {\n\tconst data_url = new URL(url);\n\tdata_url.pathname = add_data_suffix(url.pathname);\n\tif (url.pathname.endsWith('/')) {\n\t\tdata_url.searchParams.append(TRAILING_SLASH_PARAM, '1');\n\t}\n\tif (DEV && url.searchParams.has(INVALIDATED_PARAM)) {\n\t\tthrow new Error(`Cannot used reserved query parameter \"${INVALIDATED_PARAM}\"`);\n\t}\n\tdata_url.searchParams.append(INVALIDATED_PARAM, invalid.map((i) => (i ? '1' : '0')).join(''));\n\n\t// use window.fetch directly to allow using a 3rd party-patched fetch implementation\n\tconst fetcher = DEV ? dev_fetch : window.fetch;\n\tconst res = await fetcher(data_url.href, {});\n\n\tif (!res.ok) {\n\t\t// error message is a JSON-stringified string which devalue can't handle at the top level\n\t\t// turn it into a HttpError to not call handleError on the client again (was already handled on the server)\n\t\t// if `__data.json` doesn't exist or the server has an internal error,\n\t\t// avoid parsing the HTML error page as a JSON\n\t\t/** @type {string | undefined} */\n\t\tlet message;\n\t\tif (res.headers.get('content-type')?.includes('application/json')) {\n\t\t\tmessage = await res.json();\n\t\t} else if (res.status === 404) {\n\t\t\tmessage = 'Not Found';\n\t\t} else if (res.status === 500) {\n\t\t\tmessage = 'Internal Error';\n\t\t}\n\t\tthrow new HttpError(res.status, message);\n\t}\n\n\t// TODO: fix eslint error / figure out if it actually applies to our situation\n\t// eslint-disable-next-line\n\treturn new Promise(async (resolve) => {\n\t\t/**\n\t\t * Map of deferred promises that will be resolved by a subsequent chunk of data\n\t\t * @type {Map<string, import('types').Deferred>}\n\t\t */\n\t\tconst deferreds = new Map();\n\t\tconst reader = /** @type {ReadableStream<Uint8Array>} */ (res.body).getReader();\n\t\tconst decoder = new TextDecoder();\n\n\t\t/**\n\t\t * @param {any} data\n\t\t */\n\t\tfunction deserialize(data) {\n\t\t\treturn devalue.unflatten(data, {\n\t\t\t\t...app.decoders,\n\t\t\t\tPromise: (id) => {\n\t\t\t\t\treturn new Promise((fulfil, reject) => {\n\t\t\t\t\t\tdeferreds.set(id, { fulfil, reject });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet text = '';\n\n\t\twhile (true) {\n\t\t\t// Format follows ndjson (each line is a JSON object) or regular JSON spec\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done && !text) break;\n\n\t\t\ttext += !value && text ? '\\n' : decoder.decode(value, { stream: true }); // no value -> final chunk -> add a new line to trigger the last parse\n\n\t\t\twhile (true) {\n\t\t\t\tconst split = text.indexOf('\\n');\n\t\t\t\tif (split === -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst node = JSON.parse(text.slice(0, split));\n\t\t\t\ttext = text.slice(split + 1);\n\n\t\t\t\tif (node.type === 'redirect') {\n\t\t\t\t\treturn resolve(node);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'data') {\n\t\t\t\t\t// This is the first (and possibly only, if no pending promises) chunk\n\t\t\t\t\tnode.nodes?.forEach((/** @type {any} */ node) => {\n\t\t\t\t\t\tif (node?.type === 'data') {\n\t\t\t\t\t\t\tnode.uses = deserialize_uses(node.uses);\n\t\t\t\t\t\t\tnode.data = deserialize(node.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(node);\n\t\t\t\t} else if (node.type === 'chunk') {\n\t\t\t\t\t// This is a subsequent chunk containing deferred data\n\t\t\t\t\tconst { id, data, error } = node;\n\t\t\t\t\tconst deferred = /** @type {import('types').Deferred} */ (deferreds.get(id));\n\t\t\t\t\tdeferreds.delete(id);\n\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tdeferred.reject(deserialize(error));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeferred.fulfil(deserialize(data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// TODO edge case handling necessary? stream() read fails?\n}\n\n/**\n * @param {any} uses\n * @return {import('types').Uses}\n */\nfunction deserialize_uses(uses) {\n\treturn {\n\t\tdependencies: new Set(uses?.dependencies ?? []),\n\t\tparams: new Set(uses?.params ?? []),\n\t\tparent: !!uses?.parent,\n\t\troute: !!uses?.route,\n\t\turl: !!uses?.url,\n\t\tsearch_params: new Set(uses?.search_params ?? [])\n\t};\n}\n\nfunction reset_focus() {\n\tconst autofocus = document.querySelector('[autofocus]');\n\tif (autofocus) {\n\t\t// @ts-ignore\n\t\tautofocus.focus();\n\t} else {\n\t\t// Reset page selection and focus\n\t\t// We try to mimic browsers' behaviour as closely as possible by targeting the\n\t\t// first scrollable region, but unfortunately it's not a perfect match — e.g.\n\t\t// shift-tabbing won't immediately cycle up from the end of the page on Chromium\n\t\t// See https://html.spec.whatwg.org/multipage/interaction.html#get-the-focusable-area\n\t\tconst root = document.body;\n\t\tconst tabindex = root.getAttribute('tabindex');\n\n\t\troot.tabIndex = -1;\n\t\t// @ts-expect-error\n\t\troot.focus({ preventScroll: true, focusVisible: false });\n\n\t\t// restore `tabindex` as to prevent `root` from stealing input from elements\n\t\tif (tabindex !== null) {\n\t\t\troot.setAttribute('tabindex', tabindex);\n\t\t} else {\n\t\t\troot.removeAttribute('tabindex');\n\t\t}\n\n\t\t// capture current selection, so we can compare the state after\n\t\t// snapshot restoration and afterNavigate callbacks have run\n\t\tconst selection = getSelection();\n\n\t\tif (selection && selection.type !== 'None') {\n\t\t\t/** @type {Range[]} */\n\t\t\tconst ranges = [];\n\n\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\tranges.push(selection.getRangeAt(i));\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (selection.rangeCount !== ranges.length) return;\n\n\t\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\t\tconst a = ranges[i];\n\t\t\t\t\tconst b = selection.getRangeAt(i);\n\n\t\t\t\t\t// we need to do a deep comparison rather than just `a !== b` because\n\t\t\t\t\t// Safari behaves differently to other browsers\n\t\t\t\t\tif (\n\t\t\t\t\t\ta.commonAncestorContainer !== b.commonAncestorContainer ||\n\t\t\t\t\t\ta.startContainer !== b.startContainer ||\n\t\t\t\t\t\ta.endContainer !== b.endContainer ||\n\t\t\t\t\t\ta.startOffset !== b.startOffset ||\n\t\t\t\t\t\ta.endOffset !== b.endOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if the selection hasn't changed (as a result of an element being (auto)focused,\n\t\t\t\t// or a programmatic selection, we reset everything as part of the navigation)\n\t\t\t\t// fixes https://github.com/sveltejs/kit/issues/8439\n\t\t\t\tselection.removeAllRanges();\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./types.js').NavigationState} current\n * @param {import('./types.js').NavigationIntent | undefined} intent\n * @param {URL | null} url\n * @param {Exclude<import('@sveltejs/kit').NavigationType, 'enter'>} type\n */\nfunction create_navigation(current, intent, url, type) {\n\t/** @type {(value: any) => void} */\n\tlet fulfil;\n\n\t/** @type {(error: any) => void} */\n\tlet reject;\n\n\tconst complete = new Promise((f, r) => {\n\t\tfulfil = f;\n\t\treject = r;\n\t});\n\n\t// Handle any errors off-chain so that it doesn't show up as an unhandled rejection\n\tcomplete.catch(() => {});\n\n\t/** @type {import('@sveltejs/kit').Navigation} */\n\tconst navigation = {\n\t\tfrom: {\n\t\t\tparams: current.params,\n\t\t\troute: { id: current.route?.id ?? null },\n\t\t\turl: current.url\n\t\t},\n\t\tto: url && {\n\t\t\tparams: intent?.params ?? null,\n\t\t\troute: { id: intent?.route?.id ?? null },\n\t\t\turl\n\t\t},\n\t\twillUnload: !intent,\n\t\ttype,\n\t\tcomplete\n\t};\n\n\treturn {\n\t\tnavigation,\n\t\t// @ts-expect-error\n\t\tfulfil,\n\t\t// @ts-expect-error\n\t\treject\n\t};\n}\n\n/**\n * TODO: remove this in 3.0 when the page store is also removed\n *\n * We need to assign a new page object so that subscribers are correctly notified.\n * However, spreading `{ ...page }` returns an empty object so we manually\n * assign to each property instead.\n *\n * @param {import('@sveltejs/kit').Page} page\n */\nfunction clone_page(page) {\n\treturn {\n\t\tdata: page.data,\n\t\terror: page.error,\n\t\tform: page.form,\n\t\tparams: page.params,\n\t\troute: page.route,\n\t\tstate: page.state,\n\t\tstatus: page.status,\n\t\turl: page.url\n\t};\n}\n\n/**\n * @param {URL} url\n * @returns {URL}\n */\nfunction decode_hash(url) {\n\tconst new_url = new URL(url);\n\t// Safari, for some reason, does change # to %23, when entered through the address bar\n\tnew_url.hash = decodeURIComponent(url.hash);\n\treturn new_url;\n}\n\nif (DEV) {\n\t// Nasty hack to silence harmless warnings the user can do nothing about\n\tconst console_warn = console.warn;\n\tconsole.warn = function warn(...args) {\n\t\tif (\n\t\t\targs.length === 1 &&\n\t\t\t/<(Layout|Page|Error)(_[\\w$]+)?> was created (with unknown|without expected) prop '(data|form)'/.test(\n\t\t\t\targs[0]\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconsole_warn(...args);\n\t};\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (errored) {\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t});\n\t}\n}\n","/**\n * Removes nullish values from an array.\n *\n * @template T\n * @param {Array<T>} arr\n */\nexport function compact(arr) {\n\treturn arr.filter(/** @returns {val is NonNullable<T>} */ (val) => val != null);\n}\n","const DATA_SUFFIX = '/__data.json';\nconst HTML_DATA_SUFFIX = '.html__data.json';\n\n/** @param {string} pathname */\nexport function has_data_suffix(pathname) {\n\treturn pathname.endsWith(DATA_SUFFIX) || pathname.endsWith(HTML_DATA_SUFFIX);\n}\n\n/** @param {string} pathname */\nexport function add_data_suffix(pathname) {\n\tif (pathname.endsWith('.html')) return pathname.replace(/\\.html$/, HTML_DATA_SUFFIX);\n\treturn pathname.replace(/\\/$/, '') + DATA_SUFFIX;\n}\n\n/** @param {string} pathname */\nexport function strip_data_suffix(pathname) {\n\tif (pathname.endsWith(HTML_DATA_SUFFIX)) {\n\t\treturn pathname.slice(0, -HTML_DATA_SUFFIX.length) + '.html';\n\t}\n\n\treturn pathname.slice(0, -DATA_SUFFIX.length);\n}\n\nconst ROUTE_SUFFIX = '/__route.js';\n\n/**\n * @param {string} pathname\n * @returns {boolean}\n */\nexport function has_resolution_suffix(pathname) {\n\treturn pathname.endsWith(ROUTE_SUFFIX);\n}\n\n/**\n * Convert a regular URL to a route to send to SvelteKit's server-side route resolution endpoint\n * @param {string} pathname\n * @returns {string}\n */\nexport function add_resolution_suffix(pathname) {\n\treturn pathname.replace(/\\/$/, '') + ROUTE_SUFFIX;\n}\n\n/**\n * @param {string} pathname\n * @returns {string}\n */\nexport function strip_resolution_suffix(pathname) {\n\treturn pathname.slice(0, -ROUTE_SUFFIX.length);\n}\n","/**\n * @param {string} route_id\n * @param {string} dep\n */\nexport function validate_depends(route_id, dep) {\n\tconst match = /^(moz-icon|view-source|jar):/.exec(dep);\n\tif (match) {\n\t\tconsole.warn(\n\t\t\t`${route_id}: Calling \\`depends('${dep}')\\` will throw an error in Firefox because \\`${match[1]}\\` is a special URI scheme`\n\t\t);\n\t}\n}\n\nexport const INVALIDATED_PARAM = 'x-sveltekit-invalidated';\n\nexport const TRAILING_SLASH_PARAM = 'x-sveltekit-trailing-slash';\n","import { decode64 } from './base64.js';\nimport {\n\tHOLE,\n\tNAN,\n\tNEGATIVE_INFINITY,\n\tNEGATIVE_ZERO,\n\tPOSITIVE_INFINITY,\n\tUNDEFINED\n} from './constants.js';\n\n/**\n * Revive a value serialized with `devalue.stringify`\n * @param {string} serialized\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function parse(serialized, revivers) {\n\treturn unflatten(JSON.parse(serialized), revivers);\n}\n\n/**\n * Revive a value flattened with `devalue.stringify`\n * @param {number | any[]} parsed\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function unflatten(parsed, revivers) {\n\tif (typeof parsed === 'number') return hydrate(parsed, true);\n\n\tif (!Array.isArray(parsed) || parsed.length === 0) {\n\t\tthrow new Error('Invalid input');\n\t}\n\n\tconst values = /** @type {any[]} */ (parsed);\n\n\tconst hydrated = Array(values.length);\n\n\t/**\n\t * @param {number} index\n\t * @returns {any}\n\t */\n\tfunction hydrate(index, standalone = false) {\n\t\tif (index === UNDEFINED) return undefined;\n\t\tif (index === NAN) return NaN;\n\t\tif (index === POSITIVE_INFINITY) return Infinity;\n\t\tif (index === NEGATIVE_INFINITY) return -Infinity;\n\t\tif (index === NEGATIVE_ZERO) return -0;\n\n\t\tif (standalone) throw new Error(`Invalid input`);\n\n\t\tif (index in hydrated) return hydrated[index];\n\n\t\tconst value = values[index];\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\thydrated[index] = value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tif (typeof value[0] === 'string') {\n\t\t\t\tconst type = value[0];\n\n\t\t\t\tconst reviver = revivers?.[type];\n\t\t\t\tif (reviver) {\n\t\t\t\t\treturn (hydrated[index] = reviver(hydrate(value[1])));\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Date':\n\t\t\t\t\t\thydrated[index] = new Date(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Set':\n\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\thydrated[index] = set;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 1) {\n\t\t\t\t\t\t\tset.add(hydrate(value[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Map':\n\t\t\t\t\t\tconst map = new Map();\n\t\t\t\t\t\thydrated[index] = map;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tmap.set(hydrate(value[i]), hydrate(value[i + 1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RegExp':\n\t\t\t\t\t\thydrated[index] = new RegExp(value[1], value[2]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\thydrated[index] = Object(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BigInt':\n\t\t\t\t\t\thydrated[index] = BigInt(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'null':\n\t\t\t\t\t\tconst obj = Object.create(null);\n\t\t\t\t\t\thydrated[index] = obj;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tobj[value[i]] = hydrate(value[i + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n          case \"Int8Array\":\n          case \"Uint8Array\":\n          case \"Uint8ClampedArray\":\n          case \"Int16Array\":\n          case \"Uint16Array\":\n          case \"Int32Array\":\n          case \"Uint32Array\":\n          case \"Float32Array\":\n          case \"Float64Array\":\n          case \"BigInt64Array\":\n          case \"BigUint64Array\": {\n            const TypedArrayConstructor = globalThis[type];\n            const base64 = value[1];\n            const arraybuffer = decode64(base64);\n            const typedArray = new TypedArrayConstructor(arraybuffer);\n            hydrated[index] = typedArray;\n            break;\n          }\n\n          case \"ArrayBuffer\": {\n            const base64 = value[1];\n            const arraybuffer = decode64(base64);\n            hydrated[index] = arraybuffer;\n            break;\n          }\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown type ${type}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = new Array(value.length);\n\t\t\t\thydrated[index] = array;\n\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\tconst n = value[i];\n\t\t\t\t\tif (n === HOLE) continue;\n\n\t\t\t\t\tarray[i] = hydrate(n);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/** @type {Record<string, any>} */\n\t\t\tconst object = {};\n\t\t\thydrated[index] = object;\n\n\t\t\tfor (const key in value) {\n\t\t\t\tconst n = value[key];\n\t\t\t\tobject[key] = hydrate(n);\n\t\t\t}\n\t\t}\n\n\t\treturn hydrated[index];\n\t}\n\n\treturn hydrate(0);\n}\n","export const UNDEFINED = -1;\nexport const HOLE = -2;\nexport const NAN = -3;\nexport const POSITIVE_INFINITY = -4;\nexport const NEGATIVE_INFINITY = -5;\nexport const NEGATIVE_ZERO = -6;\n"],"names":["decode_params","params","key","decodeURIComponent","strip_hash","href","split","make_trackable","url","callback","search_params_callback","allow_hash","tracked","URL","Object","defineProperty","value","Proxy","searchParams","get","obj","param","Reflect","bind","enumerable","configurable","tracked_url_properties","push","property","native_fetch","window","fetch","input","init","Request","method","cache","delete","build_selector","Map","initial_fetch","resource","opts","selector","script","document","querySelector","textContent","body","JSON","parse","ttl","getAttribute","set","Number","text","d","atob","u8","Uint8Array","length","i","charCodeAt","buffer","b64_decode","Promise","resolve","Response","stringify","headers","values","Headers","join","ArrayBuffer","isView","hash","TypeError","byteOffset","byteLength","toString","param_pattern","parse_route_id","id","route","pattern","RegExp","slice","filter","affects_path","map","segment","rest_match","exec","name","matcher","optional","rest","chained","optional_match","parts","content","startsWith","escape","String","fromCharCode","parseInt","code","match","is_optional","is_rest","test","str","normalize","replace","nodes","server_loads","dictionary","matchers","layouts_with_server_load","Set","entries","leaf","layouts","errors","path","result","values_needing_match","buffered","s","next_param","next_value","keys","n","create_layout_loader","create_leaf_loader","Math","max","uses_server_data","has","sessionStorage","data","SNAPSHOT_KEY","SCROLL_KEY","STATES_KEY","PAGE_URL_KEY","HISTORY_INDEX","NAVIGATION_INDEX","PRELOAD_PRIORITIES","tap","hover","viewport","eager","off","false","origin","location","resolve_url","baseURI","baseTags","getElementsByTagName","scroll_state","x","pageXOffset","y","pageYOffset","link_option","element","levels","parent_element","parent","assignedSlot","parentNode","nodeType","host","find_anchor","target","nodeName","toUpperCase","hasAttribute","get_link_info","a","base","uses_hash_router","SVGAElement","baseVal","external","is_external_url","includes","download","get_router_options","keepfocus","noscroll","preload_code","preload_data","reload","replace_state","el","documentElement","get_option_state","notifiable_store","store","writable","ready","notify","update","val","new_value","subscribe","run","old_value","updated_listener","v","create_updated_store","timeout","check","async","clearTimeout","res","assets","pragma","ok","updated","json","version","hash_routing","pathname","protocol","load_css","deps","decode64","string","binaryString","output","accumulatedBits","KEY_STRING","indexOf","asciiToBinary","arraybuffer","dv","DataView","setUint8","valid_layout_exports","HttpError","constructor","status","this","message","Redirect","SvelteKitError","Error","super","get_status","error","page","navigating","onMount","form","state","current","_c","__privateAdd","_route","$.state","_url","WeakMap","_d","_e","ICON_REL_ATTRIBUTES","scroll_positions","storage.get","snapshots","stores","update_scroll_positions","index","native_navigation","update_service_worker","navigator","registration","serviceWorker","getRegistration","noop","routes","default_layout_loader","default_error_loader","container","app","invalidated","components","load_cache","before_navigate_callbacks","on_navigate_callbacks","after_navigate_callbacks","root","current_history_index","current_navigation_index","token","branch","hydrated","started","autoscroll","is_navigating","hash_navigating","has_navigated","force_invalidation","preload_tokens","start","_app","_target","hydrate","_b","_a","hooks","call","history","Date","now","replaceState","scroll","scrollRestoration","scrollTo","node_ids","server_route","server_data_nodes","parsed_route","get_navigation_intent","find","branch_promises","server_data_node","uses","deserialize_uses","load_node","loader","j","assign","create_data_node","all","splice","get_navigation_result_from_branch","load_root_error_page","handle_error","props","initialize","_hydrate","reject","_goto","goto","decode_hash","addEventListener","e","should_block","persist_state","nav","create_navigation","navigation","cancel","forEach","fn","preventDefault","returnValue","visibilityState","connection","saveData","mousemove_timeout","current_a","event","defaultPrevented","preload","composedPath","setTimeout","passive","observer","IntersectionObserver","entry","isIntersecting","_preload_code","unobserve","threshold","priority","options","same_url","get_page_key","intent","add","promise","load_route","then","type","_preload_data","after_navigate","disconnect","querySelectorAll","observe","setup_preload","button","which","metaKey","ctrlKey","shiftKey","altKey","nonhash","same_pathname","current_hash","ownerDocument","getElementById","top","scrollIntoView","focus","update_url","fulfil","requestAnimationFrame","navigate","_before_navigate","HTMLFormElement","prototype","cloneNode","submitter","formTarget","formMethod","formAction","action","event_form","stopPropagation","FormData","submitter_name","append","search","URLSearchParams","history_index","navigation_index","is_hash_change","delta","popped","accept","block","go","nav_token","link","rel","clone_page","persisted","_start_router","capture_snapshot","some","c","snapshot","capture","restore_snapshot","restore","storage.set","redirect_count","keepFocus","noScroll","invalidateAll","invalidate","push_invalidated","load","style","remove","sync","from","to","willUnload","complete","slash","node","trailing_slash","endsWith","constructors","arr","branch_node","component","data_changed","p","prev","is_tracking","dependencies","search_params","universal","depends","dep","load_input","requested","blob","credentials","integrity","keepalive","mode","redirect","referrer","referrerPolicy","signal","resolved","size","cached","performance","subsequent_fetch","setHeaders","untrack","server","trailingSlash","has_changed","parent_changed","route_changed","url_changed","search_params_changed","tracked_params","previous","preload_error","invalidating","loaders","catch","server_data","old_url","new_url","changed","old_values","getAll","new_values","every","diff_search_params","parent_invalid","invalid_server_nodes","invalid","Boolean","load_data","handled_error","err","error_load","load_nearest_error_page","idx","concat","server_fallback","root_layout","rerouted","reroute","tmp","get_rerouted_url","decodeURI","get_url_path","cancellable","prev_token","previous_history_index","previous_navigation_index","navigation_result","change","pushState","clear_onward_history","Array","cleanup","$set","new_page","activeElement","tick","deep_linked","changed_focus","autofocus","tabindex","tabIndex","preventScroll","focusVisible","root2","setAttribute","removeAttribute","selection","getSelection","ranges","rangeCount","getRangeAt","b","commonAncestorContainer","startContainer","endContainer","startOffset","endOffset","removeAllRanges","reset_focus","get_message","handleError","data_url","fetcher","deferreds","reader","getReader","decoder","TextDecoder","deserialize","parsed","revivers","isArray","standalone","NaN","Infinity","reviver","BigInt","create","typedArray","TypedArrayConstructor","globalThis","array","object","devalue.unflatten","decoders","done","read","decode","stream","node2","deferred","f","r"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]}